pptname,invariant,invariantType,variables,tp,fp,enter,bug,description,response resource,name_attribute
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.owner.gravatar_id == """"",daikon.inv.unary.string.OneOfString,(return.owner.gravatar_id),1,0,0,0,,simple-user,"[('simple-user', 'gravatar_id')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.owner.type == ""Organization""",daikon.inv.unary.string.OneOfString,(return.owner.type),1,0,0,0,,simple-user,"[('simple-user', 'type')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.default_branch == ""main""",daikon.inv.unary.string.OneOfString,(return.default_branch),1,0,0,0,The default branch of the repository.,repository,"[('repository', 'default_branch')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.merge_commit_message one of { ""BLANK"", ""PR_BODY"", ""PR_TITLE"" }",daikon.inv.unary.string.OneOfString,(return.merge_commit_message),1,0,0,0,,repository,"[('repository', 'merge_commit_message')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.merge_commit_title one of { ""MERGE_MESSAGE"", ""PR_TITLE"" }",daikon.inv.unary.string.OneOfString,(return.merge_commit_title),1,0,0,0,,repository,"[('repository', 'merge_commit_title')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.squash_merge_commit_message one of { ""BLANK"", ""COMMIT_MESSAGES"", ""PR_BODY"" }",daikon.inv.unary.string.OneOfString,(return.squash_merge_commit_message),1,0,0,0,,repository,"[('repository', 'squash_merge_commit_message')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,"return.squash_merge_commit_title one of { ""COMMIT_OR_PR_TITLE"", ""PR_TITLE"" }",daikon.inv.unary.string.OneOfString,(return.squash_merge_commit_title),1,0,0,0,,repository,"[('repository', 'squash_merge_commit_title')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,"return.owner.gravatar_id == """"",daikon.inv.unary.string.OneOfString,(return.owner.gravatar_id),1,0,0,0,,simple-user,"[('simple-user', 'gravatar_id')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,"return.owner.type == ""Organization""",daikon.inv.unary.string.OneOfString,(return.owner.type),1,0,0,0,,simple-user,"[('simple-user', 'type')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,"return.visibility one of { ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),1,0,0,0,,minimal-repository,"[('minimal-repository', 'visibility')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data&offers&price&taxes(main.getMultiHotelOffers&Input):::EXIT,"return.pricingMode one of { ""PER_OCCUPANT"", ""PER_PRODUCT"" }",daikon.inv.unary.string.OneOfString,(return.pricingMode),1,0,0,0,Specifies if the tax applies per occupant or per room   - PER_OCCUPANT   - PER_PRODUCT,Tax,"[('Tax', 'pricingMode')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data&offers(main.getMultiHotelOffers&Input):::EXIT,"return.policies.cancellation.type == ""FULL_STAY""",daikon.inv.unary.string.OneOfString,(return.policies.cancellation.type),1,0,0,0,* FULL_STAY: the Penalty amount equals the `total` price.,CancellationType,"[('CancellationType', 'type')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,"return.hotel.type == ""hotel""",daikon.inv.unary.string.OneOfString,(return.hotel.type),1,0,0,0,type,Hotel,"[('Hotel', 'type')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results&prices(main.getComicIndividual&Input):::EXIT,"return.type one of { ""digitalPurchasePrice"", ""printPrice"" }",daikon.inv.unary.string.OneOfString,(return.type),1,0,0,0,"A description of the price (e.g. print price, digital price).",ComicPrice,"[('ComicPrice', 'type')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,"return.status == ""Ok""",daikon.inv.unary.string.OneOfString,(return.status),1,0,0,0,A string description of the call status.,ComicDataWrapper,"[('ComicDataWrapper', 'status')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,"return.copyright == ""\251 2022 MARVEL""",daikon.inv.unary.string.OneOfString,(return.copyright),1,0,0,0,The copyright notice for the returned result.,ComicDataWrapper,"[('ComicDataWrapper', 'copyright')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,"return.attributionText == ""Data provided by Marvel. \251 2022 MARVEL""",daikon.inv.unary.string.OneOfString,(return.attributionText),1,0,0,0,The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.,ComicDataWrapper,"[('ComicDataWrapper', 'attributionText')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,"return.attributionHTML == ""<a href=\""http://marvel.com\"">Data provided by Marvel. \251 2022 MARVEL</a>""",daikon.inv.unary.string.OneOfString,(return.attributionHTML),1,0,0,0,An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.,ComicDataWrapper,"[('ComicDataWrapper', 'attributionHTML')]"
main..searchByIdOrTitle&200&Ratings(main.searchByIdOrTitle&Input):::EXIT,"return.Source one of { ""Internet Movie Database"", ""Metacritic"", ""Rotten Tomatoes"" }",daikon.inv.unary.string.OneOfString,(return.Source),1,0,0,0,,Response,"[('Response', 'Source')]"
main..searchByIdOrTitle&200(main.searchByIdOrTitle&Input):::EXIT,"return.Response == ""True""",daikon.inv.unary.string.OneOfString,(return.Response),1,0,0,0,,Response,"[('Response', 'Response')]"
main..searchByIdOrTitle&200(main.searchByIdOrTitle&Input):::EXIT,"return.Type one of { ""episode"", ""movie"", ""series"" }",daikon.inv.unary.string.OneOfString,(return.Type),1,0,0,0,,Response,"[('Response', 'Type')]"
main..bySearch&200(main.bySearch&Input):::EXIT,"return.Response == ""True""",daikon.inv.unary.string.OneOfString,(return.Response),1,0,0,0,,Response,"[('Response', 'Response')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,"return.linked_from.type == ""track""",daikon.inv.unary.string.OneOfString,(return.linked_from.type),1,0,0,0,The object type: 'track'.,track-simple,"[('track-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,"return.type == ""track""",daikon.inv.unary.string.OneOfString,(return.type),1,0,0,0,The object type: 'track'.,track-simple,"[('track-simple', 'type')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,"return.contentDetails.dimension one of { ""2d"", ""3d"" }",daikon.inv.unary.string.OneOfString,(return.contentDetails.dimension),1,0,0,0,The value of dimension indicates whether the video is available in 3D or in 2D.,VideoContentDetails,"[('VideoContentDetails', 'dimension')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,"return.status.license one of { ""creativeCommon"", ""youtube"" }",daikon.inv.unary.string.OneOfString,(return.status.license),1,0,0,0,The video's license. @mutable youtube.videos.insert youtube.videos.update,VideoStatus,"[('VideoStatus', 'license')]"
