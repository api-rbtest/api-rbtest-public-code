pptname,invariant,invariantType,variables,tp,fp,enter,bug,description,response resource,name_attribute
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.license.url is Url,daikon.inv.unary.string.IsUrl,(return.license.url),1,0,0,0,,license-simple,"[('license-simple', 'url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.avatar_url),1,0,0,0,,simple-user,"[('simple-user', 'avatar_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is Url,daikon.inv.unary.string.IsUrl,(return.owner.url),1,0,0,0,,simple-user,"[('simple-user', 'url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.html_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.html_url),1,0,0,0,,simple-user,"[('simple-user', 'html_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.followers_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.followers_url),1,0,0,0,,simple-user,"[('simple-user', 'followers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.following_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.following_url),1,0,0,0,,simple-user,"[('simple-user', 'following_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.gists_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.gists_url),1,0,0,0,,simple-user,"[('simple-user', 'gists_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.starred_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.starred_url),1,0,0,0,,simple-user,"[('simple-user', 'starred_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.subscriptions_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.subscriptions_url),1,0,0,0,,simple-user,"[('simple-user', 'subscriptions_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.organizations_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.organizations_url),1,0,0,0,,simple-user,"[('simple-user', 'organizations_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.repos_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.repos_url),1,0,0,0,,simple-user,"[('simple-user', 'repos_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.events_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.events_url),1,0,0,0,,simple-user,"[('simple-user', 'events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.received_events_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.received_events_url),1,0,0,0,,simple-user,"[('simple-user', 'received_events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.html_url is Url,daikon.inv.unary.string.IsUrl,(return.html_url),1,0,0,0,,repository,"[('repository', 'html_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is Url,daikon.inv.unary.string.IsUrl,(return.url),1,0,0,0,,repository,"[('repository', 'url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.archive_url is Url,daikon.inv.unary.string.IsUrl,(return.archive_url),1,0,0,0,,repository,"[('repository', 'archive_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.assignees_url is Url,daikon.inv.unary.string.IsUrl,(return.assignees_url),1,0,0,0,,repository,"[('repository', 'assignees_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.blobs_url is Url,daikon.inv.unary.string.IsUrl,(return.blobs_url),1,0,0,0,,repository,"[('repository', 'blobs_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.branches_url is Url,daikon.inv.unary.string.IsUrl,(return.branches_url),1,0,0,0,,repository,"[('repository', 'branches_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.collaborators_url is Url,daikon.inv.unary.string.IsUrl,(return.collaborators_url),1,0,0,0,,repository,"[('repository', 'collaborators_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.comments_url is Url,daikon.inv.unary.string.IsUrl,(return.comments_url),1,0,0,0,,repository,"[('repository', 'comments_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.commits_url is Url,daikon.inv.unary.string.IsUrl,(return.commits_url),1,0,0,0,,repository,"[('repository', 'commits_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.compare_url is Url,daikon.inv.unary.string.IsUrl,(return.compare_url),1,0,0,0,,repository,"[('repository', 'compare_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.contents_url is Url,daikon.inv.unary.string.IsUrl,(return.contents_url),1,0,0,0,,repository,"[('repository', 'contents_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.contributors_url is Url,daikon.inv.unary.string.IsUrl,(return.contributors_url),1,0,0,0,,repository,"[('repository', 'contributors_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.deployments_url is Url,daikon.inv.unary.string.IsUrl,(return.deployments_url),1,0,0,0,,repository,"[('repository', 'deployments_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.downloads_url is Url,daikon.inv.unary.string.IsUrl,(return.downloads_url),1,0,0,0,,repository,"[('repository', 'downloads_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.events_url is Url,daikon.inv.unary.string.IsUrl,(return.events_url),1,0,0,0,,repository,"[('repository', 'events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks_url is Url,daikon.inv.unary.string.IsUrl,(return.forks_url),1,0,0,0,,repository,"[('repository', 'forks_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.git_commits_url is Url,daikon.inv.unary.string.IsUrl,(return.git_commits_url),1,0,0,0,,repository,"[('repository', 'git_commits_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.git_refs_url is Url,daikon.inv.unary.string.IsUrl,(return.git_refs_url),1,0,0,0,,repository,"[('repository', 'git_refs_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.git_tags_url is Url,daikon.inv.unary.string.IsUrl,(return.git_tags_url),1,0,0,0,,repository,"[('repository', 'git_tags_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.issue_comment_url is Url,daikon.inv.unary.string.IsUrl,(return.issue_comment_url),1,0,0,0,,repository,"[('repository', 'issue_comment_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.issue_events_url is Url,daikon.inv.unary.string.IsUrl,(return.issue_events_url),1,0,0,0,,repository,"[('repository', 'issue_events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.issues_url is Url,daikon.inv.unary.string.IsUrl,(return.issues_url),1,0,0,0,,repository,"[('repository', 'issues_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.keys_url is Url,daikon.inv.unary.string.IsUrl,(return.keys_url),1,0,0,0,,repository,"[('repository', 'keys_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.labels_url is Url,daikon.inv.unary.string.IsUrl,(return.labels_url),1,0,0,0,,repository,"[('repository', 'labels_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.languages_url is Url,daikon.inv.unary.string.IsUrl,(return.languages_url),1,0,0,0,,repository,"[('repository', 'languages_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.merges_url is Url,daikon.inv.unary.string.IsUrl,(return.merges_url),1,0,0,0,,repository,"[('repository', 'merges_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.milestones_url is Url,daikon.inv.unary.string.IsUrl,(return.milestones_url),1,0,0,0,,repository,"[('repository', 'milestones_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.notifications_url is Url,daikon.inv.unary.string.IsUrl,(return.notifications_url),1,0,0,0,,repository,"[('repository', 'notifications_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.pulls_url is Url,daikon.inv.unary.string.IsUrl,(return.pulls_url),1,0,0,0,,repository,"[('repository', 'pulls_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.releases_url is Url,daikon.inv.unary.string.IsUrl,(return.releases_url),1,0,0,0,,repository,"[('repository', 'releases_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.stargazers_url is Url,daikon.inv.unary.string.IsUrl,(return.stargazers_url),1,0,0,0,,repository,"[('repository', 'stargazers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.statuses_url is Url,daikon.inv.unary.string.IsUrl,(return.statuses_url),1,0,0,0,,repository,"[('repository', 'statuses_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.subscribers_url is Url,daikon.inv.unary.string.IsUrl,(return.subscribers_url),1,0,0,0,,repository,"[('repository', 'subscribers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.subscription_url is Url,daikon.inv.unary.string.IsUrl,(return.subscription_url),1,0,0,0,,repository,"[('repository', 'subscription_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.tags_url is Url,daikon.inv.unary.string.IsUrl,(return.tags_url),1,0,0,0,,repository,"[('repository', 'tags_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.teams_url is Url,daikon.inv.unary.string.IsUrl,(return.teams_url),1,0,0,0,,repository,"[('repository', 'teams_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.trees_url is Url,daikon.inv.unary.string.IsUrl,(return.trees_url),1,0,0,0,,repository,"[('repository', 'trees_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.clone_url is Url,daikon.inv.unary.string.IsUrl,(return.clone_url),1,0,0,0,,repository,"[('repository', 'clone_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.hooks_url is Url,daikon.inv.unary.string.IsUrl,(return.hooks_url),1,0,0,0,,repository,"[('repository', 'hooks_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.avatar_url),1,0,0,0,,simple-user,"[('simple-user', 'avatar_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is Url,daikon.inv.unary.string.IsUrl,(return.owner.url),1,0,0,0,,simple-user,"[('simple-user', 'url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.html_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.html_url),1,0,0,0,,simple-user,"[('simple-user', 'html_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.followers_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.followers_url),1,0,0,0,,simple-user,"[('simple-user', 'followers_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.following_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.following_url),1,0,0,0,,simple-user,"[('simple-user', 'following_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.gists_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.gists_url),1,0,0,0,,simple-user,"[('simple-user', 'gists_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.starred_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.starred_url),1,0,0,0,,simple-user,"[('simple-user', 'starred_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.subscriptions_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.subscriptions_url),1,0,0,0,,simple-user,"[('simple-user', 'subscriptions_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.organizations_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.organizations_url),1,0,0,0,,simple-user,"[('simple-user', 'organizations_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.repos_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.repos_url),1,0,0,0,,simple-user,"[('simple-user', 'repos_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.events_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.events_url),1,0,0,0,,simple-user,"[('simple-user', 'events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.received_events_url is Url,daikon.inv.unary.string.IsUrl,(return.owner.received_events_url),1,0,0,0,,simple-user,"[('simple-user', 'received_events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.html_url is Url,daikon.inv.unary.string.IsUrl,(return.html_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'html_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is Url,daikon.inv.unary.string.IsUrl,(return.url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.archive_url is Url,daikon.inv.unary.string.IsUrl,(return.archive_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'archive_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.assignees_url is Url,daikon.inv.unary.string.IsUrl,(return.assignees_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'assignees_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.blobs_url is Url,daikon.inv.unary.string.IsUrl,(return.blobs_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'blobs_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.branches_url is Url,daikon.inv.unary.string.IsUrl,(return.branches_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'branches_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.collaborators_url is Url,daikon.inv.unary.string.IsUrl,(return.collaborators_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'collaborators_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.comments_url is Url,daikon.inv.unary.string.IsUrl,(return.comments_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'comments_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.commits_url is Url,daikon.inv.unary.string.IsUrl,(return.commits_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'commits_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.compare_url is Url,daikon.inv.unary.string.IsUrl,(return.compare_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'compare_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.contents_url is Url,daikon.inv.unary.string.IsUrl,(return.contents_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'contents_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.contributors_url is Url,daikon.inv.unary.string.IsUrl,(return.contributors_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'contributors_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.deployments_url is Url,daikon.inv.unary.string.IsUrl,(return.deployments_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'deployments_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.downloads_url is Url,daikon.inv.unary.string.IsUrl,(return.downloads_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'downloads_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.events_url is Url,daikon.inv.unary.string.IsUrl,(return.events_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.forks_url is Url,daikon.inv.unary.string.IsUrl,(return.forks_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'forks_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.git_commits_url is Url,daikon.inv.unary.string.IsUrl,(return.git_commits_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'git_commits_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.git_refs_url is Url,daikon.inv.unary.string.IsUrl,(return.git_refs_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'git_refs_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.git_tags_url is Url,daikon.inv.unary.string.IsUrl,(return.git_tags_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'git_tags_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.issue_comment_url is Url,daikon.inv.unary.string.IsUrl,(return.issue_comment_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'issue_comment_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.issue_events_url is Url,daikon.inv.unary.string.IsUrl,(return.issue_events_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'issue_events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.issues_url is Url,daikon.inv.unary.string.IsUrl,(return.issues_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'issues_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.keys_url is Url,daikon.inv.unary.string.IsUrl,(return.keys_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'keys_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.labels_url is Url,daikon.inv.unary.string.IsUrl,(return.labels_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'labels_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.languages_url is Url,daikon.inv.unary.string.IsUrl,(return.languages_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'languages_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.merges_url is Url,daikon.inv.unary.string.IsUrl,(return.merges_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'merges_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.milestones_url is Url,daikon.inv.unary.string.IsUrl,(return.milestones_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'milestones_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.notifications_url is Url,daikon.inv.unary.string.IsUrl,(return.notifications_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'notifications_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.pulls_url is Url,daikon.inv.unary.string.IsUrl,(return.pulls_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'pulls_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.releases_url is Url,daikon.inv.unary.string.IsUrl,(return.releases_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'releases_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.stargazers_url is Url,daikon.inv.unary.string.IsUrl,(return.stargazers_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'stargazers_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.statuses_url is Url,daikon.inv.unary.string.IsUrl,(return.statuses_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'statuses_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.subscribers_url is Url,daikon.inv.unary.string.IsUrl,(return.subscribers_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'subscribers_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.subscription_url is Url,daikon.inv.unary.string.IsUrl,(return.subscription_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'subscription_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.tags_url is Url,daikon.inv.unary.string.IsUrl,(return.tags_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'tags_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.teams_url is Url,daikon.inv.unary.string.IsUrl,(return.teams_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'teams_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.trees_url is Url,daikon.inv.unary.string.IsUrl,(return.trees_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'trees_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.clone_url is Url,daikon.inv.unary.string.IsUrl,(return.clone_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'clone_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.hooks_url is Url,daikon.inv.unary.string.IsUrl,(return.hooks_url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'hooks_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.license.url is Url,daikon.inv.unary.string.IsUrl,(return.license.url),1,0,0,0,,minimal-repository,"[('minimal-repository', 'url')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results&collections(main.getComicIndividual&Input):::EXIT,return.resourceURI is Url,daikon.inv.unary.string.IsUrl,(return.resourceURI),1,0,0,0,The path to the individual comic resource.,ComicSummary,"[('ComicSummary', 'resourceURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results&creators&items(main.getComicIndividual&Input):::EXIT,return.resourceURI is Url,daikon.inv.unary.string.IsUrl,(return.resourceURI),1,0,0,0,The path to the individual creator resource.,CreatorSummary,"[('CreatorSummary', 'resourceURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results&images(main.getComicIndividual&Input):::EXIT,return.path is Url,daikon.inv.unary.string.IsUrl,(return.path),1,0,0,0,The directory path of to the image.,Image,"[('Image', 'path')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results&stories&items(main.getComicIndividual&Input):::EXIT,return.resourceURI is Url,daikon.inv.unary.string.IsUrl,(return.resourceURI),1,0,0,0,The path to the individual story resource.,StorySummary,"[('StorySummary', 'resourceURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results&variants(main.getComicIndividual&Input):::EXIT,return.resourceURI is Url,daikon.inv.unary.string.IsUrl,(return.resourceURI),1,0,0,0,The path to the individual comic resource.,ComicSummary,"[('ComicSummary', 'resourceURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.resourceURI is Url,daikon.inv.unary.string.IsUrl,(return.resourceURI),1,0,0,0,The canonical URL identifier for this resource.,Comic,"[('Comic', 'resourceURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.series.resourceURI is Url,daikon.inv.unary.string.IsUrl,(return.series.resourceURI),1,0,0,0,The path to the individual series resource.,SeriesSummary,"[('SeriesSummary', 'resourceURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.thumbnail.path is Url,daikon.inv.unary.string.IsUrl,(return.thumbnail.path),1,0,0,0,The directory path of to the image.,Image,"[('Image', 'path')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.creators.collectionURI is Url,daikon.inv.unary.string.IsUrl,(return.creators.collectionURI),1,0,0,0,The path to the full list of creators in this collection.,CreatorList,"[('CreatorList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.characters.collectionURI is Url,daikon.inv.unary.string.IsUrl,(return.characters.collectionURI),1,0,0,0,The path to the full list of characters in this collection.,CharacterList,"[('CharacterList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.stories.collectionURI is Url,daikon.inv.unary.string.IsUrl,(return.stories.collectionURI),1,0,0,0,The path to the full list of stories in this collection.,StoryList,"[('StoryList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.events.collectionURI is Url,daikon.inv.unary.string.IsUrl,(return.events.collectionURI),1,0,0,0,The path to the full list of events in this collection.,EventList,"[('EventList', 'collectionURI')]"
main..searchByIdOrTitle&200(main.searchByIdOrTitle&Input):::EXIT,return.Poster is Url,daikon.inv.unary.string.IsUrl,(return.Poster),1,0,0,0,,Response,"[('Response', 'Poster')]"
main..bySearch&200&Search(main.bySearch&Input):::EXIT,return.Poster is Url,daikon.inv.unary.string.IsUrl,(return.Poster),1,0,0,0,,Response,"[('Response', 'Poster')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.external_urls.spotify is Url,daikon.inv.unary.string.IsUrl,(return.external_urls.spotify),1,0,0,0,,playlist,"[('playlist', 'spotify')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.owner.external_urls.spotify is Url,daikon.inv.unary.string.IsUrl,(return.owner.external_urls.spotify),1,0,0,0,,user-profile,"[('user-profile', 'spotify')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.preview_url is Url,daikon.inv.unary.string.IsUrl,(return.preview_url),1,0,0,0,A URL to a 30 second preview (MP3 format) of the track.,track-simple,"[('track-simple', 'preview_url')]"
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT,return.url is Url,daikon.inv.unary.string.IsUrl,(return.url),1,0,0,0,The source URL of the image.,image,"[('image', 'url')]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,return.href is Url,daikon.inv.unary.string.IsUrl,(return.href),1,0,0,0,A link to the Web API endpoint returning the full result of the request.,album-simple-page,"[('album-simple-page', 'href')]"
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT,return.image_url is Url,daikon.inv.unary.string.IsUrl,(return.image_url),1,0,0,0,,BusinessesResult,"[('BusinessesResult', 'image_url')]"
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT,return.url is Url,daikon.inv.unary.string.IsUrl,(return.url),1,0,0,0,,BusinessesResult,"[('BusinessesResult', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.snippet.thumbnails.default.url is Url,daikon.inv.unary.string.IsUrl,(return.snippet.thumbnails.default.url),1,0,0,0,The thumbnail image's URL.,Thumbnail,"[('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.snippet.thumbnails.high.url is Url,daikon.inv.unary.string.IsUrl,(return.snippet.thumbnails.high.url),1,0,0,0,The thumbnail image's URL.,Thumbnail,"[('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.snippet.thumbnails.maxres.url is Url,daikon.inv.unary.string.IsUrl,(return.snippet.thumbnails.maxres.url),1,0,0,0,The thumbnail image's URL.,Thumbnail,"[('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.snippet.thumbnails.medium.url is Url,daikon.inv.unary.string.IsUrl,(return.snippet.thumbnails.medium.url),1,0,0,0,The thumbnail image's URL.,Thumbnail,"[('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.snippet.thumbnails.standard.url is Url,daikon.inv.unary.string.IsUrl,(return.snippet.thumbnails.standard.url),1,0,0,0,The thumbnail image's URL.,Thumbnail,"[('Thumbnail', 'url')]"
