pptname,invariant,invariantType,variables,tp,fp,enter,bug,description,response resource,name_attribute
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.org is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(input.org, return.full_name)",1,0,0,0,;,repository,"[('input', 'org'), ('full_name',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.org is a substring of return.owner.url,daikon.inv.binary.twoString.StdString$SubString,"(input.org, return.owner.url)",1,0,0,0,;,simple-user,"[('input', 'org'), ('url',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.org is a substring of return.owner.html_url,daikon.inv.binary.twoString.StdString$SubString,"(input.org, return.owner.html_url)",1,0,0,0,;,simple-user,"[('input', 'org'), ('html_url',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.license_template is a substring of return.license.url,daikon.inv.binary.twoString.StdString$SubString,"(input.license_template, return.license.url)",1,0,0,0,"string (description: Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, ""mit"" or ""mpl-2.0"");",license-simple,"[('input', 'license_template'), ('url',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.full_name)",1,0,0,0,The name of the repository.;,repository,"[('repository', 'name'), ('repository', 'full_name')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.full_name is a substring of return.html_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.html_url)",1,0,0,0,;,repository,"[('repository', 'full_name'), ('repository', 'html_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.full_name is a substring of return.url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.url)",1,0,0,0,;,repository,"[('repository', 'full_name'), ('repository', 'url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.full_name is a substring of return.git_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.git_url)",1,0,0,0,;,repository,"[('repository', 'full_name'), ('repository', 'git_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.full_name is a substring of return.ssh_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.ssh_url)",1,0,0,0,;,repository,"[('repository', 'full_name'), ('repository', 'ssh_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.license.key is a substring of return.license.url,daikon.inv.binary.twoString.StdString$SubString,"(return.license.key, return.license.url)",1,0,0,0,;,license-simple,"[('license-simple', 'key'), ('license-simple', 'url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.followers_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.followers_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'followers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.following_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.following_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'following_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.gists_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.gists_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'gists_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.starred_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.starred_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'starred_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.subscriptions_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.subscriptions_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'subscriptions_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.organizations_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.organizations_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'organizations_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.repos_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.repos_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'repos_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.events_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url is a substring of return.owner.received_events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.received_events_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'received_events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.html_url is a substring of return.html_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.html_url, return.html_url)",1,0,0,0,;,repository,"[('simple-user', 'html_url'), ('repository', 'html_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.html_url is a substring of return.clone_url,daikon.inv.binary.twoString.StdString$SubString,"(return.html_url, return.clone_url)",1,0,0,0,;,repository,"[('repository', 'html_url'), ('repository', 'clone_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.archive_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.archive_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'archive_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.assignees_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.assignees_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'assignees_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.blobs_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.blobs_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'blobs_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.branches_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.branches_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'branches_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.collaborators_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.collaborators_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'collaborators_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.comments_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.comments_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'comments_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.commits_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.commits_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'commits_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.compare_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.compare_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'compare_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.contents_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.contents_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'contents_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.contributors_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.contributors_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'contributors_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.deployments_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.deployments_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'deployments_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.downloads_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.downloads_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'downloads_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.events_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.forks_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.forks_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'forks_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.git_commits_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.git_commits_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'git_commits_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.git_refs_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.git_refs_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'git_refs_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.git_tags_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.git_tags_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'git_tags_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.issue_comment_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.issue_comment_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'issue_comment_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.issue_events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.issue_events_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'issue_events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.issues_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.issues_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'issues_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.keys_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.keys_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'keys_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.labels_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.labels_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'labels_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.languages_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.languages_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'languages_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.merges_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.merges_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'merges_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.milestones_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.milestones_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'milestones_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.notifications_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.notifications_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'notifications_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.pulls_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.pulls_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'pulls_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.releases_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.releases_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'releases_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.stargazers_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.stargazers_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'stargazers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.statuses_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.statuses_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'statuses_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.subscribers_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.subscribers_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'subscribers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.subscription_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.subscription_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'subscription_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.tags_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.tags_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'tags_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.teams_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.teams_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'teams_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.trees_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.trees_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'trees_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.url is a substring of return.hooks_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.hooks_url)",1,0,0,0,;,repository,"[('repository', 'url'), ('repository', 'hooks_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.full_name)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'name'), ('minimal-repository', 'full_name')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.full_name is a substring of return.html_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.html_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'full_name'), ('minimal-repository', 'html_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.full_name is a substring of return.url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'full_name'), ('minimal-repository', 'url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.full_name is a substring of return.git_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.git_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'full_name'), ('minimal-repository', 'git_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.full_name is a substring of return.ssh_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.ssh_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'full_name'), ('minimal-repository', 'ssh_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.followers_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.followers_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'followers_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.following_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.following_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'following_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.gists_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.gists_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'gists_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.starred_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.starred_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'starred_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.subscriptions_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.subscriptions_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'subscriptions_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.organizations_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.organizations_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'organizations_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.repos_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.repos_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'repos_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.events_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.url is a substring of return.owner.received_events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.url, return.owner.received_events_url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'received_events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.owner.html_url is a substring of return.html_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.html_url, return.html_url)",1,0,0,0,;,minimal-repository,"[('simple-user', 'html_url'), ('minimal-repository', 'html_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.html_url is a substring of return.clone_url,daikon.inv.binary.twoString.StdString$SubString,"(return.html_url, return.clone_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'html_url'), ('minimal-repository', 'clone_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.archive_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.archive_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'archive_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.assignees_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.assignees_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'assignees_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.blobs_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.blobs_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'blobs_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.branches_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.branches_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'branches_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.collaborators_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.collaborators_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'collaborators_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.comments_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.comments_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'comments_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.commits_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.commits_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'commits_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.compare_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.compare_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'compare_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.contents_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.contents_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'contents_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.contributors_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.contributors_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'contributors_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.deployments_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.deployments_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'deployments_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.downloads_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.downloads_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'downloads_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.events_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.forks_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.forks_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'forks_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.git_commits_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.git_commits_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'git_commits_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.git_refs_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.git_refs_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'git_refs_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.git_tags_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.git_tags_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'git_tags_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.issue_comment_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.issue_comment_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'issue_comment_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.issue_events_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.issue_events_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'issue_events_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.issues_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.issues_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'issues_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.keys_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.keys_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'keys_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.labels_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.labels_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'labels_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.languages_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.languages_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'languages_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.merges_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.merges_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'merges_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.milestones_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.milestones_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'milestones_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.notifications_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.notifications_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'notifications_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.pulls_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.pulls_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'pulls_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.releases_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.releases_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'releases_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.stargazers_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.stargazers_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'stargazers_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.statuses_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.statuses_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'statuses_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.subscribers_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.subscribers_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'subscribers_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.subscription_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.subscription_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'subscription_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.tags_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.tags_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'tags_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.teams_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.teams_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'teams_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.trees_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.trees_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'trees_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.url is a substring of return.hooks_url,daikon.inv.binary.twoString.StdString$SubString,"(return.url, return.hooks_url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'url'), ('minimal-repository', 'hooks_url')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.license.key is a substring of return.license.url,daikon.inv.binary.twoString.StdString$SubString,"(return.license.key, return.license.url)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'key'), ('minimal-repository', 'url')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data&offers(main.getMultiHotelOffers&Input):::EXIT,input.lang is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.lang, return.self)",1,0,0,0,"string (description: Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html));A self link to the object. Use this to refresh the Offer price",HotelOffer,"[('input', 'lang'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data&offers(main.getMultiHotelOffers&Input):::EXIT,return.id is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.self)",1,0,0,0,Unique identifier of this offer. Might be valid for a temporary period only.;A self link to the object. Use this to refresh the Offer price,HotelOffer,"[('HotelOffer', 'id'), ('HotelOffer', 'self')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.checkInDate is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.checkInDate, return.self)",1,0,0,0,"string (description: Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today's date in the GMT time zone);A self link to the object. Use this to refresh the Offer price",HotelOffer,"[('input', 'checkInDate'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.checkOutDate is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.checkOutDate, return.self)",1,0,0,0,"string (description: Check-out date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is checkInDate+1. If not present, it will default to checkInDate +1);A self link to the object. Use this to refresh the Offer price",HotelOffer,"[('input', 'checkOutDate'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.countryOfResidence is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.countryOfResidence, return.self)",1,0,0,0,string (description: Code of the country of residence of the traveler expressed using ISO 3166-1 format);A self link to the object. Use this to refresh the Offer price,HotelOffer,"[('input', 'countryOfResidence'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.currency is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.currency, return.self)",1,0,0,0,"string (description: Use this parameter to request a specific currency. ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). If a hotel does not support the requested currency, the prices for the hotel will be returned in the local currency of the hotel);A self link to the object. Use this to refresh the Offer price",HotelOffer,"[('input', 'currency'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.paymentPolicy is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.paymentPolicy, return.self)",1,0,0,0,string (description: Filter the response based on a specific payment type. NONE means all types (default));A self link to the object. Use this to refresh the Offer price,HotelOffer,"[('input', 'paymentPolicy'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.boardType is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.boardType, return.self)",1,0,0,0,string (description: Filter response based on available meals:         * ROOM_ONLY = Room Only         * BREAKFAST = Breakfast         * HALF_BOARD = Diner & Breakfast (only for Aggregators)         * FULL_BOARD = Full Board (only for Aggregators)         * ALL_INCLUSIVE = All Inclusive (only for Aggregators));A self link to the object. Use this to refresh the Offer price,HotelOffer,"[('input', 'boardType'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,input.lang is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(input.lang, return.self)",1,0,0,0,"string (description: Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html));A self link to the object. Use this to refresh the Offer price",HotelOffer,"[('input', 'lang'), ('self',)]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,return.type is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.self)",1,0,0,0,the type of the object (hotel-offers);A self link to the object. Use this to refresh the Offer price,HotelOffer,"[('HotelOffers', 'type'), ('HotelOffer', 'self')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,return.hotel.type is a substring of return.type,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.hotel.type)",1,0,0,0,the type of the object (hotel-offers);type,Hotel,"[('HotelOffers', 'type'), ('Hotel', 'type')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,return.hotel.hotelId is a substring of return.self,daikon.inv.binary.twoString.StdString$SubString,"(return.self, return.hotel.hotelId)",1,0,0,0,A self link to the object. Use this to refresh the Offer price;Amadeus Property Code (8 chars),Hotel,"[('HotelOffer', 'self'), ('Hotel', 'hotelId')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,return.hotel.chainCode is a substring of return.hotel.hotelId,daikon.inv.binary.twoString.StdString$SubString,"(return.hotel.hotelId, return.hotel.chainCode)",1,0,0,0,Amadeus Property Code (8 chars);Brand (RT...) or Merchant (AD...) (Amadeus 2 chars Code),Hotel,"[('Hotel', 'hotelId'), ('Hotel', 'chainCode')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data(main.getMultiHotelOffers&Input):::EXIT,return.hotel.cityCode is a substring of return.hotel.hotelId,daikon.inv.binary.twoString.StdString$SubString,"(return.hotel.hotelId, return.hotel.cityCode)",1,0,0,0,Amadeus Property Code (8 chars);Warning: The IATA city code associated to the hotel (not necessary the real Hotel City),Hotel,"[('Hotel', 'hotelId'), ('Hotel', 'cityCode')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.resourceURI is a substring of return.creators.collectionURI,daikon.inv.binary.twoString.StdString$SubString,"(return.resourceURI, return.creators.collectionURI)",1,0,0,0,The canonical URL identifier for this resource.;The path to the full list of creators in this collection.,CreatorList,"[('Comic', 'resourceURI'), ('CreatorList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.resourceURI is a substring of return.characters.collectionURI,daikon.inv.binary.twoString.StdString$SubString,"(return.resourceURI, return.characters.collectionURI)",1,0,0,0,The canonical URL identifier for this resource.;The path to the full list of characters in this collection.,CharacterList,"[('Comic', 'resourceURI'), ('CharacterList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.resourceURI is a substring of return.stories.collectionURI,daikon.inv.binary.twoString.StdString$SubString,"(return.resourceURI, return.stories.collectionURI)",1,0,0,0,The canonical URL identifier for this resource.;The path to the full list of stories in this collection.,StoryList,"[('Comic', 'resourceURI'), ('StoryList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.resourceURI is a substring of return.events.collectionURI,daikon.inv.binary.twoString.StdString$SubString,"(return.resourceURI, return.events.collectionURI)",1,0,0,0,The canonical URL identifier for this resource.;The path to the full list of events in this collection.,EventList,"[('Comic', 'resourceURI'), ('EventList', 'collectionURI')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,return.copyright is a substring of return.attributionText,daikon.inv.binary.twoString.StdString$SubString,"(return.copyright, return.attributionText)",1,0,0,0,The copyright notice for the returned result.;The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.,ComicDataWrapper,"[('ComicDataWrapper', 'copyright'), ('ComicDataWrapper', 'attributionText')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,return.attributionText is a substring of return.attributionHTML,daikon.inv.binary.twoString.StdString$SubString,"(return.attributionText, return.attributionHTML)",1,0,0,0,The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.;An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.,ComicDataWrapper,"[('ComicDataWrapper', 'attributionText'), ('ComicDataWrapper', 'attributionHTML')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,input.user_id is a substring of return.owner.external_urls.spotify,daikon.inv.binary.twoString.StdString$SubString,"(input.user_id, return.owner.external_urls.spotify)",1,0,0,0,string (description: The user's Spotify user ID);,user-profile,"[('input', 'user_id'), ('spotify',)]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,input.user_id is a substring of return.owner.href,daikon.inv.binary.twoString.StdString$SubString,"(input.user_id, return.owner.href)",1,0,0,0,string (description: The user's Spotify user ID);A link to the Web API endpoint for this user.,user-profile,"[('input', 'user_id'), ('href',)]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,input.user_id is a substring of return.owner.uri,daikon.inv.binary.twoString.StdString$SubString,"(input.user_id, return.owner.uri)",1,0,0,0,string (description: The user's Spotify user ID);The Spotify URI for the user.,user-profile,"[('input', 'user_id'), ('uri',)]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.id is a substring of return.external_urls.spotify,daikon.inv.binary.twoString.StdString$SubString,"(return.external_urls.spotify, return.id)",1,0,0,0,;The Spotify ID of the playlist.,playlist,"[('playlist', 'spotify'), ('playlist', 'id')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.type is a substring of return.external_urls.spotify,daikon.inv.binary.twoString.StdString$SubString,"(return.external_urls.spotify, return.type)",1,0,0,0,;The object type: 'playlist'.,playlist,"[('playlist', 'spotify'), ('playlist', 'type')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.id)",1,0,0,0,A link to the Web API endpoint providing full details of the playlist.;The Spotify ID of the playlist.,playlist,"[('playlist', 'href'), ('playlist', 'id')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.href is a substring of return.tracks.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.tracks.href)",1,0,0,0,A link to the Web API endpoint providing full details of the playlist.;A link to the Web API endpoint returning the full result of the request.,playlist-track-page,"[('playlist', 'href'), ('playlist-track-page', 'href')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.type is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.type)",1,0,0,0,A link to the Web API endpoint providing full details of the playlist.;The object type: 'playlist'.,playlist,"[('playlist', 'href'), ('playlist', 'type')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.id is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.uri)",1,0,0,0,The Spotify ID of the playlist.;Spotify URI of the playlist.,playlist,"[('playlist', 'id'), ('playlist', 'uri')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.owner.type is a substring of return.owner.external_urls.spotify,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.external_urls.spotify, return.owner.type)",1,0,0,0,;The object type: 'user',user-profile,"[('user-profile', 'spotify'), ('user-profile', 'type')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.owner.type is a substring of return.owner.href,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.href, return.owner.type)",1,0,0,0,A link to the Web API endpoint for this user.;The object type: 'user',user-profile,"[('user-profile', 'href'), ('user-profile', 'type')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.owner.type is a substring of return.owner.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.type, return.owner.uri)",1,0,0,0,The object type: 'user';The Spotify URI for the user.,user-profile,"[('user-profile', 'type'), ('user-profile', 'uri')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.type is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.uri)",1,0,0,0,The object type: 'playlist'.;Spotify URI of the playlist.,playlist,"[('playlist', 'type'), ('playlist', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT,return.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.id)",1,0,0,0,A link to the Web API endpoint providing full details of the artist.;The Spotify ID for the artist.,artist-simple,"[('artist-simple', 'href'), ('artist-simple', 'id')]"
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT,return.type is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.type)",1,0,0,0,A link to the Web API endpoint providing full details of the artist.;The object type: 'artist',artist-simple,"[('artist-simple', 'href'), ('artist-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT,return.id is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.uri)",1,0,0,0,The Spotify ID for the artist.;The Spotify URI for the artist.,artist-simple,"[('artist-simple', 'id'), ('artist-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT,return.type is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.uri)",1,0,0,0,The object type: 'artist';The Spotify URI for the artist.,artist-simple,"[('artist-simple', 'type'), ('artist-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.id)",1,0,0,0,A link to the Web API endpoint providing full details of the track.;The Spotify ID for the track.,track-simple,"[('track-simple', 'href'), ('track-simple', 'id')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.type is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.linked_from.type)",1,0,0,0,A link to the Web API endpoint providing full details of the track.;The object type: 'track'.,track-simple,"[('track-simple', 'href'), ('track-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.type is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.type)",1,0,0,0,A link to the Web API endpoint providing full details of the track.;The object type: 'track'.,track-simple,"[('track-simple', 'href'), ('track-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.id is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.uri)",1,0,0,0,The Spotify ID for the track.;The Spotify URI for the track.,track-simple,"[('track-simple', 'id'), ('track-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.id is a substring of return.linked_from.href,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.href, return.linked_from.id)",1,0,0,0,A link to the Web API endpoint providing full details of the track.;The Spotify ID for the track.,track-simple,"[('track-simple', 'href'), ('track-simple', 'id')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.type is a substring of return.linked_from.href,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.href, return.linked_from.type)",1,0,0,0,A link to the Web API endpoint providing full details of the track.;The object type: 'track'.,track-simple,"[('track-simple', 'href'), ('track-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.type is a substring of return.linked_from.href,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.href, return.type)",1,0,0,0,A link to the Web API endpoint providing full details of the track.;The object type: 'track'.,track-simple,"[('track-simple', 'href'), ('track-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.id is a substring of return.linked_from.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.id, return.linked_from.uri)",1,0,0,0,The Spotify ID for the track.;The Spotify URI for the track.,track-simple,"[('track-simple', 'id'), ('track-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.type is a substring of return.linked_from.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.type, return.linked_from.uri)",1,0,0,0,The object type: 'track'.;The Spotify URI for the track.,track-simple,"[('track-simple', 'type'), ('track-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.type is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.type, return.uri)",1,0,0,0,The object type: 'track'.;The Spotify URI for the track.,track-simple,"[('track-simple', 'type'), ('track-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.type is a substring of return.linked_from.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.linked_from.uri, return.type)",1,0,0,0,The Spotify URI for the track.;The object type: 'track'.,track-simple,"[('track-simple', 'uri'), ('track-simple', 'type')]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.type is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.uri)",1,0,0,0,The object type: 'track'.;The Spotify URI for the track.,track-simple,"[('track-simple', 'type'), ('track-simple', 'uri')]"
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT,input.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return.href)",1,0,0,0,string (description: The Spotify ID for the album);A link to the Web API endpoint returning the full result of the request.,track-simple-page,"[('input', 'id'), ('href',)]"
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT,input.id is a substring of return.next,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return.next)",1,0,0,0,string (description: The Spotify ID for the album);URL to the next page of items. (null if none),track-simple-page,"[('input', 'id'), ('next',)]"
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT,input.id is a substring of return.previous,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return.previous)",1,0,0,0,string (description: The Spotify ID for the album);URL to the previous page of items. (null if none),track-simple-page,"[('input', 'id'), ('previous',)]"
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT,input.market is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(input.market, return.href)",1,0,0,0,string (description: The market (an ISO 3166-1 alpha-2 country code));A link to the Web API endpoint returning the full result of the request.,track-simple-page,"[('input', 'market'), ('href',)]"
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT,input.market is a substring of return.next,daikon.inv.binary.twoString.StdString$SubString,"(input.market, return.next)",1,0,0,0,string (description: The market (an ISO 3166-1 alpha-2 country code));URL to the next page of items. (null if none),track-simple-page,"[('input', 'market'), ('next',)]"
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT,input.market is a substring of return.previous,daikon.inv.binary.twoString.StdString$SubString,"(input.market, return.previous)",1,0,0,0,string (description: The market (an ISO 3166-1 alpha-2 country code));URL to the previous page of items. (null if none),track-simple-page,"[('input', 'market'), ('previous',)]"
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT,return.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.id)",1,0,0,0,A link to the Web API endpoint providing full details of the artist.;The Spotify ID for the artist.,artist-simple,"[('artist-simple', 'href'), ('artist-simple', 'id')]"
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT,return.type is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.type)",1,0,0,0,A link to the Web API endpoint providing full details of the artist.;The object type: 'artist',artist-simple,"[('artist-simple', 'href'), ('artist-simple', 'type')]"
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT,return.id is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.uri)",1,0,0,0,The Spotify ID for the artist.;The Spotify URI for the artist.,artist-simple,"[('artist-simple', 'id'), ('artist-simple', 'uri')]"
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT,return.type is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.uri)",1,0,0,0,The object type: 'artist';The Spotify URI for the artist.,artist-simple,"[('artist-simple', 'type'), ('artist-simple', 'uri')]"
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT,return.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.id)",1,0,0,0,A link to the Web API endpoint providing full details of the album.;The Spotify ID for the album.,album-simple,"[('album-simple', 'href'), ('album-simple', 'id')]"
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT,return.type is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(return.href, return.type)",1,0,0,0,A link to the Web API endpoint providing full details of the album.;The object type: 'album'.,album-simple,"[('album-simple', 'href'), ('album-simple', 'type')]"
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT,return.id is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.uri)",1,0,0,0,The Spotify ID for the album.;The Spotify URI for the album.,album-simple,"[('album-simple', 'id'), ('album-simple', 'uri')]"
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT,return.type is a substring of return.uri,daikon.inv.binary.twoString.StdString$SubString,"(return.type, return.uri)",1,0,0,0,The object type: 'album'.;The Spotify URI for the album.,album-simple,"[('album-simple', 'type'), ('album-simple', 'uri')]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,input.id is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return.href)",1,0,0,0,string (description: The Spotify ID for the artist);A link to the Web API endpoint returning the full result of the request.,album-simple-page,"[('input', 'id'), ('href',)]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,input.id is a substring of return.next,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return.next)",1,0,0,0,string (description: The Spotify ID for the artist);URL to the next page of items. (null if none),album-simple-page,"[('input', 'id'), ('next',)]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,input.id is a substring of return.previous,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return.previous)",1,0,0,0,string (description: The Spotify ID for the artist);URL to the previous page of items. (null if none),album-simple-page,"[('input', 'id'), ('previous',)]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,input.market is a substring of return.href,daikon.inv.binary.twoString.StdString$SubString,"(input.market, return.href)",1,0,0,0,string (description: The market (an ISO 3166-1 alpha-2 country code));A link to the Web API endpoint returning the full result of the request.,album-simple-page,"[('input', 'market'), ('href',)]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,input.market is a substring of return.next,daikon.inv.binary.twoString.StdString$SubString,"(input.market, return.next)",1,0,0,0,string (description: The market (an ISO 3166-1 alpha-2 country code));URL to the next page of items. (null if none),album-simple-page,"[('input', 'market'), ('next',)]"
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT,input.market is a substring of return.previous,daikon.inv.binary.twoString.StdString$SubString,"(input.market, return.previous)",1,0,0,0,string (description: The market (an ISO 3166-1 alpha-2 country code));URL to the previous page of items. (null if none),album-simple-page,"[('input', 'market'), ('previous',)]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.id is a substring of return.player.embedHtml,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.player.embedHtml)",1,0,0,0,The ID that YouTube uses to uniquely identify the video.;An <iframe> tag that embeds a player that will play the video.,VideoPlayer,"[('Video', 'id'), ('VideoPlayer', 'embedHtml')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.id is a substring of return.snippet.thumbnails.default.url,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.snippet.thumbnails.default.url)",1,0,0,0,The ID that YouTube uses to uniquely identify the video.;The thumbnail image's URL.,Thumbnail,"[('Video', 'id'), ('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.id is a substring of return.snippet.thumbnails.high.url,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.snippet.thumbnails.high.url)",1,0,0,0,The ID that YouTube uses to uniquely identify the video.;The thumbnail image's URL.,Thumbnail,"[('Video', 'id'), ('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.id is a substring of return.snippet.thumbnails.maxres.url,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.snippet.thumbnails.maxres.url)",1,0,0,0,The ID that YouTube uses to uniquely identify the video.;The thumbnail image's URL.,Thumbnail,"[('Video', 'id'), ('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.id is a substring of return.snippet.thumbnails.medium.url,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.snippet.thumbnails.medium.url)",1,0,0,0,The ID that YouTube uses to uniquely identify the video.;The thumbnail image's URL.,Thumbnail,"[('Video', 'id'), ('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.id is a substring of return.snippet.thumbnails.standard.url,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.snippet.thumbnails.standard.url)",1,0,0,0,The ID that YouTube uses to uniquely identify the video.;The thumbnail image's URL.,Thumbnail,"[('Video', 'id'), ('Thumbnail', 'url')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.player.embedHeight is a substring of return.player.embedHtml,daikon.inv.binary.twoString.StdString$SubString,"(return.player.embedHeight, return.player.embedHtml)",1,0,0,0,;An <iframe> tag that embeds a player that will play the video.,VideoPlayer,"[('VideoPlayer', 'embedHeight'), ('VideoPlayer', 'embedHtml')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.player.embedWidth is a substring of return.player.embedHtml,daikon.inv.binary.twoString.StdString$SubString,"(return.player.embedHtml, return.player.embedWidth)",1,0,0,0,An <iframe> tag that embeds a player that will play the video.;The embed width,VideoPlayer,"[('VideoPlayer', 'embedHtml'), ('VideoPlayer', 'embedWidth')]"
