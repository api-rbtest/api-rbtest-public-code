pptname,invariant,invariantType,variables,tp,fp,enter,bug,description,response resource,name_attribute
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.allow_merge_commit == return.allow_merge_commit,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_commit, return.allow_merge_commit)",1,0,0,0,"boolean (description: Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits);Whether to allow merge commits for pull requests.",repository,"[('input', 'allow_merge_commit'), ('allow_merge_commit',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.forks_count)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'forks_count')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.stargazers_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.stargazers_count)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'stargazers_count')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.watchers_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.watchers_count)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'watchers_count')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.size,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.size)",1,0,0,0,;,,"[('repository', 'forks'), (None, None)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.open_issues_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.open_issues_count)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'open_issues_count')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.subscribers_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.subscribers_count)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'subscribers_count')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.network_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.network_count)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'network_count')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.open_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.open_issues)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'open_issues')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == return.watchers,daikon.inv.binary.twoScalar.IntEqual,"(return.forks, return.watchers)",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'watchers')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.forks == size(return.topics[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks, size(return.topics[..]))",1,0,0,0,;,repository,"[('repository', 'forks'), ('repository', 'topics')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.permissions.admin == return.has_downloads,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.admin, return.has_downloads)",1,0,0,0,;Whether downloads are enabled.,repository,"[('repository', 'admin'), ('repository', 'has_downloads')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.permissions.pull == return.has_downloads,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.pull, return.has_downloads)",1,0,0,0,;Whether downloads are enabled.,repository,"[('repository', 'pull'), ('repository', 'has_downloads')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.permissions.triage == return.has_downloads,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.triage, return.has_downloads)",1,0,0,0,;Whether downloads are enabled.,repository,"[('repository', 'triage'), ('repository', 'has_downloads')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.permissions.push == return.has_downloads,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.push, return.has_downloads)",1,0,0,0,;Whether downloads are enabled.,repository,"[('repository', 'push'), ('repository', 'has_downloads')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.permissions.maintain == return.has_downloads,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.maintain, return.has_downloads)",1,0,0,0,;Whether downloads are enabled.,repository,"[('repository', 'maintain'), ('repository', 'has_downloads')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.id == return.organization.id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.organization.id)",1,0,0,0,;,simple-user,"[('simple-user', 'id'), ('simple-user', 'id')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.site_admin == return.fork,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.site_admin, return.fork)",1,0,0,0,;,repository,"[('simple-user', 'site_admin'), ('repository', 'fork')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.organization.site_admin == return.fork,daikon.inv.binary.twoScalar.IntEqual,"(return.organization.site_admin, return.fork)",1,0,0,0,;,repository,"[('simple-user', 'site_admin'), ('repository', 'fork')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.fork == return.has_pages,daikon.inv.binary.twoScalar.IntEqual,"(return.fork, return.has_pages)",1,0,0,0,;,repository,"[('repository', 'fork'), ('repository', 'has_pages')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.fork == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.fork, return.archived)",1,0,0,0,;Whether the repository is archived.,repository,"[('repository', 'fork'), ('repository', 'archived')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.fork == return.disabled,daikon.inv.binary.twoScalar.IntEqual,"(return.fork, return.disabled)",1,0,0,0,;Returns whether or not this repository disabled.,repository,"[('repository', 'fork'), ('repository', 'disabled')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.fork == return.allow_update_branch,daikon.inv.binary.twoScalar.IntEqual,"(return.fork, return.allow_update_branch)",1,0,0,0,;,repository,"[('repository', 'fork'), ('repository', 'allow_update_branch')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.fork == return.web_commit_signoff_required,daikon.inv.binary.twoScalar.IntEqual,"(return.fork, return.web_commit_signoff_required)",1,0,0,0,;,repository,"[('repository', 'fork'), ('repository', 'web_commit_signoff_required')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.forks_count == return.forks,daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, return.forks)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'forks_count'), ('minimal-repository', 'forks')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.stargazers_count == return.watchers_count,daikon.inv.binary.twoScalar.IntEqual,"(return.stargazers_count, return.watchers_count)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'stargazers_count'), ('minimal-repository', 'watchers_count')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.stargazers_count == return.watchers,daikon.inv.binary.twoScalar.IntEqual,"(return.stargazers_count, return.watchers)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'stargazers_count'), ('minimal-repository', 'watchers')]"
main.orgs{org}repos.getOrganizationRepositories&200(main.getOrganizationRepositories&Input):::EXIT,return.open_issues_count == return.open_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.open_issues)",1,0,0,0,;,minimal-repository,"[('minimal-repository', 'open_issues_count'), ('minimal-repository', 'open_issues')]"
main.v1publiccomics{comicId}.getComicIndividual&200&data&results(main.getComicIndividual&Input):::EXIT,return.creators.returned == size(return.creators.items[]),daikon.inv.binary.twoScalar.IntEqual,"(return.creators.returned, size(return.creators.items[..]))",1,0,0,0,The number of creators returned in this collection (up to 20).;The list of returned creators in this collection.,CreatorList,"[('CreatorList', 'returned'), ('CreatorList', 'items')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,return.data.total == return.data.count,daikon.inv.binary.twoScalar.IntEqual,"(return.data.total, return.data.count)",1,0,0,0,The total number of resources available given the current filter set.;The total number of results returned by this call.,ComicDataContainer,"[('ComicDataContainer', 'total'), ('ComicDataContainer', 'count')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,return.data.total == size(return.data.results[]),daikon.inv.binary.twoScalar.IntEqual,"(return.data.total, size(return.data.results[..]))",1,0,0,0,The total number of resources available given the current filter set.;The list of comics returned by the call,ComicDataContainer,"[('ComicDataContainer', 'total'), ('ComicDataContainer', 'results')]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,return.data.results[return.data.offset] == return.data.results[return.data.total-1],daikon.inv.binary.twoScalar.IntEqual,"(return.data.results[return.data.offset], return.data.results[return.data.total-1])",1,0,0,0,;,,"[(None, None), (None, None)]"
main.v1publiccomics{comicId}.getComicIndividual&200(main.getComicIndividual&Input):::EXIT,return.data.results[return.data.offset] == return.data.results[return.data.count-1],daikon.inv.binary.twoScalar.IntEqual,"(return.data.results[return.data.offset], return.data.results[return.data.count-1])",1,0,0,0,;,,"[(None, None), (None, None)]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.followers.total == return.tracks.offset,daikon.inv.binary.twoScalar.IntEqual,"(return.followers.total, return.tracks.offset)",1,0,0,0,The total number of followers.;The offset of the items returned (as set in the query or by default).,playlist-track-page,"[('playlist', 'total'), ('playlist-track-page', 'offset')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.followers.total == return.tracks.total,daikon.inv.binary.twoScalar.IntEqual,"(return.followers.total, return.tracks.total)",1,0,0,0,The total number of followers.;The total number of items available to return.,playlist-track-page,"[('playlist', 'total'), ('playlist-track-page', 'total')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.followers.total == size(return.images[]),daikon.inv.binary.twoScalar.IntEqual,"(return.followers.total, size(return.images[..]))",1,0,0,0,"The total number of followers.;The cover art for the album in various sizes, widest first.",playlist,"[('playlist', 'total'), ('playlist', 'images')]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,return.followers.total == size(return.tracks.items[]),daikon.inv.binary.twoScalar.IntEqual,"(return.followers.total, size(return.tracks.items[..]))",1,0,0,0,The total number of followers.;The requested data.,playlist-track-page,"[('playlist', 'total'), ('playlist-track-page', 'items')]"
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT,return.height == return.width,daikon.inv.binary.twoScalar.IntEqual,"(return.height, return.width)",1,0,0,0,The image height in pixels. If unknown: null or not returned.;The image width in pixels. If unknown: null or not returned.,image,"[('image', 'height'), ('image', 'width')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.snippet.thumbnails.high.width == return.snippet.thumbnails.standard.height,daikon.inv.binary.twoScalar.IntEqual,"(return.snippet.thumbnails.high.width, return.snippet.thumbnails.standard.height)",1,0,0,0,(Optional) Width of the thumbnail image.;(Optional) Height of the thumbnail image.,Thumbnail,"[('Thumbnail', 'width'), ('Thumbnail', 'height')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.suggestions.editorSuggestions == return.suggestions.processingErrors,daikon.inv.binary.twoScalar.IntEqual,"(return.suggestions.editorSuggestions, return.suggestions.processingErrors)",1,0,0,0,"A list of video editing operations that might improve the video quality or playback experience of the uploaded video.;A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.",VideoSuggestions,"[('VideoSuggestions', 'editorSuggestions'), ('VideoSuggestions', 'processingErrors')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.suggestions.editorSuggestions == return.suggestions.processingHints,daikon.inv.binary.twoScalar.IntEqual,"(return.suggestions.editorSuggestions, return.suggestions.processingHints)",1,0,0,0,A list of video editing operations that might improve the video quality or playback experience of the uploaded video.;A list of suggestions that may improve YouTube's ability to process the video.,VideoSuggestions,"[('VideoSuggestions', 'editorSuggestions'), ('VideoSuggestions', 'processingHints')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.suggestions.editorSuggestions == return.suggestions.processingWarnings,daikon.inv.binary.twoScalar.IntEqual,"(return.suggestions.editorSuggestions, return.suggestions.processingWarnings)",1,0,0,0,"A list of video editing operations that might improve the video quality or playback experience of the uploaded video.;A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.",VideoSuggestions,"[('VideoSuggestions', 'editorSuggestions'), ('VideoSuggestions', 'processingWarnings')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.suggestions.editorSuggestions == return.topicDetails.relevantTopicIds,daikon.inv.binary.twoScalar.IntEqual,"(return.suggestions.editorSuggestions, return.topicDetails.relevantTopicIds)",1,0,0,0,"A list of video editing operations that might improve the video quality or playback experience of the uploaded video.;Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.",VideoTopicDetails,"[('VideoSuggestions', 'editorSuggestions'), ('VideoTopicDetails', 'relevantTopicIds')]"
main.youtubev3videos.getVideos&200&items(main.getVideos&Input):::EXIT,return.suggestions.editorSuggestions == return.topicDetails.topicIds,daikon.inv.binary.twoScalar.IntEqual,"(return.suggestions.editorSuggestions, return.topicDetails.topicIds)",1,0,0,0,"A list of video editing operations that might improve the video quality or playback experience of the uploaded video.;A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href=""http://wiki.freebase.com/wiki/Topic_API"">Freebase Topic API.",VideoTopicDetails,"[('VideoSuggestions', 'editorSuggestions'), ('VideoTopicDetails', 'topicIds')]"
main.youtubev3videos.getVideos&200(main.getVideos&Input):::EXIT,input.maxResults == return.pageInfo.resultsPerPage,daikon.inv.binary.twoScalar.IntEqual,"(input.maxResults, return.pageInfo.resultsPerPage)",1,0,0,0,"integer (description: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter);The number of results included in the API response.",PageInfo,"[('input', 'maxResults'), ('resultsPerPage',)]"
