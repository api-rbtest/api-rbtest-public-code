pptname,invariant,invariantType,variables,tp,fp,enter,bug,description,response resource,name_attribute
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.org == return.owner.login,daikon.inv.binary.twoString.StringEqual,"(input.org, return.owner.login)",1,0,0,0,;,simple-user,"[('input', 'org'), ('login',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.org == return.organization.login,daikon.inv.binary.twoString.StringEqual,"(input.org, return.organization.login)",1,0,0,0,;,simple-user,"[('input', 'org'), ('login',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.license_template == return.license.key,daikon.inv.binary.twoString.StringEqual,"(input.license_template, return.license.key)",1,0,0,0,"string (description: Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, ""mit"" or ""mpl-2.0"");",license-simple,"[('input', 'license_template'), ('key',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.squash_merge_commit_title == return.squash_merge_commit_title,daikon.inv.binary.twoString.StringEqual,"(input.squash_merge_commit_title, return.squash_merge_commit_title)",1,0,0,0,;,repository,"[('input', 'squash_merge_commit_title'), ('squash_merge_commit_title',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.squash_merge_commit_message == return.squash_merge_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.squash_merge_commit_message, return.squash_merge_commit_message)",1,0,0,0,;,repository,"[('input', 'squash_merge_commit_message'), ('squash_merge_commit_message',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.merge_commit_title == return.merge_commit_title,daikon.inv.binary.twoString.StringEqual,"(input.merge_commit_title, return.merge_commit_title)",1,0,0,0,;,repository,"[('input', 'merge_commit_title'), ('merge_commit_title',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,input.merge_commit_message == return.merge_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.merge_commit_message, return.merge_commit_message)",1,0,0,0,;,repository,"[('input', 'merge_commit_message'), ('merge_commit_message',)]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.node_id == return.organization.node_id,daikon.inv.binary.twoString.StringEqual,"(return.owner.node_id, return.organization.node_id)",1,0,0,0,;,simple-user,"[('simple-user', 'node_id'), ('simple-user', 'node_id')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.avatar_url == return.organization.avatar_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.avatar_url, return.organization.avatar_url)",1,0,0,0,;,simple-user,"[('simple-user', 'avatar_url'), ('simple-user', 'avatar_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.gravatar_id == return.organization.gravatar_id,daikon.inv.binary.twoString.StringEqual,"(return.owner.gravatar_id, return.organization.gravatar_id)",1,0,0,0,;,simple-user,"[('simple-user', 'gravatar_id'), ('simple-user', 'gravatar_id')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.url == return.organization.url,daikon.inv.binary.twoString.StringEqual,"(return.owner.url, return.organization.url)",1,0,0,0,;,simple-user,"[('simple-user', 'url'), ('simple-user', 'url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.html_url == return.organization.html_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.html_url, return.organization.html_url)",1,0,0,0,;,simple-user,"[('simple-user', 'html_url'), ('simple-user', 'html_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.followers_url == return.organization.followers_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.followers_url, return.organization.followers_url)",1,0,0,0,;,simple-user,"[('simple-user', 'followers_url'), ('simple-user', 'followers_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.following_url == return.organization.following_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.following_url, return.organization.following_url)",1,0,0,0,;,simple-user,"[('simple-user', 'following_url'), ('simple-user', 'following_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.gists_url == return.organization.gists_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.gists_url, return.organization.gists_url)",1,0,0,0,;,simple-user,"[('simple-user', 'gists_url'), ('simple-user', 'gists_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.starred_url == return.organization.starred_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.starred_url, return.organization.starred_url)",1,0,0,0,;,simple-user,"[('simple-user', 'starred_url'), ('simple-user', 'starred_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.subscriptions_url == return.organization.subscriptions_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.subscriptions_url, return.organization.subscriptions_url)",1,0,0,0,;,simple-user,"[('simple-user', 'subscriptions_url'), ('simple-user', 'subscriptions_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.organizations_url == return.organization.organizations_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.organizations_url, return.organization.organizations_url)",1,0,0,0,;,simple-user,"[('simple-user', 'organizations_url'), ('simple-user', 'organizations_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.repos_url == return.organization.repos_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.repos_url, return.organization.repos_url)",1,0,0,0,;,simple-user,"[('simple-user', 'repos_url'), ('simple-user', 'repos_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.events_url == return.organization.events_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.events_url, return.organization.events_url)",1,0,0,0,;,simple-user,"[('simple-user', 'events_url'), ('simple-user', 'events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.received_events_url == return.organization.received_events_url,daikon.inv.binary.twoString.StringEqual,"(return.owner.received_events_url, return.organization.received_events_url)",1,0,0,0,;,simple-user,"[('simple-user', 'received_events_url'), ('simple-user', 'received_events_url')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.owner.type == return.organization.type,daikon.inv.binary.twoString.StringEqual,"(return.owner.type, return.organization.type)",1,0,0,0,;,simple-user,"[('simple-user', 'type'), ('simple-user', 'type')]"
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT,return.html_url == return.svn_url,daikon.inv.binary.twoString.StringEqual,"(return.html_url, return.svn_url)",1,0,0,0,;,repository,"[('repository', 'html_url'), ('repository', 'svn_url')]"
main.shoppinghotel-offers.getMultiHotelOffers&200&data&offers(main.getMultiHotelOffers&Input):::EXIT,input.checkInDate == return.checkInDate,daikon.inv.binary.twoString.StringEqual,"(input.checkInDate, return.checkInDate)",1,0,0,0,"string (description: Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today's date in the GMT time zone);check-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).",HotelOffer,"[('input', 'checkInDate'), ('checkInDate',)]"
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT,input.user_id == return.owner.id,daikon.inv.binary.twoString.StringEqual,"(input.user_id, return.owner.id)",1,0,0,0,string (description: The user's Spotify user ID);The Spotify ID for this user.,user-profile,"[('input', 'user_id'), ('id',)]"
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT,return.linked_from.type == return.type,daikon.inv.binary.twoString.StringEqual,"(return.linked_from.type, return.type)",1,0,0,0,The object type: 'track'.;The object type: 'track'.,track-simple,"[('track-simple', 'type'), ('track-simple', 'type')]"
