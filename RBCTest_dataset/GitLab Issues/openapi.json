{
  "openapi": "3.0.1",
  "info": {
    "title": "GitLab Issues API",
    "description": "This is a simple API for test",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:30000/api/v4"
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "description": "Get a list of all visible projects across GitLab for the authenticated user. When accessed without authentication, only public projects with simple fields are returned.",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id_after",
            "in": "query",
            "description": "Limit results to projects with IDs greater than the specified ID.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id_before",
            "in": "query",
            "description": "Limit results to projects with IDs less than the specified ID.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "last_activity_after",
            "in": "query",
            "description": "Limit results to projects with last_activity after specified time.ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "last_activity_before",
            "in": "query",
            "description": "Limit results to projects with last_activity before specified time. ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "membership",
            "in": "query",
            "description": "Limit by projects that the current user is a member of.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_access_level",
            "in": "query",
            "description": "Limit by current user minimal access level.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                10,
                20,
                30,
                40,
                50
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "repository_size",
                "storage_size",
                "packages_size",
                "wiki_size"
              ]
            }
          },
          {
            "name": "owned",
            "in": "query",
            "description": "Limit by projects explicitly owned by the current user.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "repository_storage",
            "in": "query",
            "description": "Limit results to projects stored on repository_storage. (admins only)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_namespaces",
            "in": "query",
            "description": "Include ancestor namespaces when matching search criteria.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of projects matching the search criteria.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in asc or desc order. Default is desc",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "starred",
            "in": "query",
            "description": "Limit by projects starred by the current user.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "Include project statistics.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "schema": {
              "type": "string",
              "enum": [
                "public",
                "internal",
                "private"
              ]
            }
          },
          {
            "name": "with_custom_attributes",
            "in": "query",
            "description": "Include custom attributes in response. (admins only)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_issues_enabled",
            "in": "query",
            "description": "Limit by enabled issues feature.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_merge_requests_enabled",
            "in": "query",
            "description": "Limit by enabled merge requests feature.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_programming_language",
            "in": "query",
            "description": "Limit by projects which use the given programming language.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a projects list for authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicProjectDetails"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "description": "Creates a new project owned by the authenticated user.",
        "parameters": [
          {
            "name": "allow_merge_on_skipped_pipeline",
            "in": "query",
            "description": "Set whether or not merge requests can be merged with skipped jobs.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "auto_cancel_pending_pipelines",
            "in": "query",
            "description": "Auto-cancel pending pipelines. This isn\u2019t a boolean, but enabled/disabled.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            }
          },
          {
            "name": "auto_devops_deploy_strategy",
            "in": "query",
            "description": "Auto Deploy strategy",
            "schema": {
              "type": "string",
              "enum": [
                "continuous",
                "manual",
                "timed_incremental"
              ]
            }
          },
          {
            "name": "auto_devops_enabled",
            "in": "query",
            "description": "Enable Auto DevOps for this project.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoclose_referenced_issues",
            "in": "query",
            "description": "Set whether auto-closing referenced issues on default branch.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "avatar",
            "in": "query",
            "description": "Image file for avatar of the project.",
            "schema": {
              "type": "string",
              "format": "file"
            }
          },
          {
            "name": "build_coverage_regex",
            "in": "query",
            "description": "Test coverage parsing.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "build_git_strategy",
            "in": "query",
            "description": "The Git strategy. Defaults to fetch.",
            "schema": {
              "type": "string",
              "default": "fetch"
            }
          },
          {
            "name": "build_timeout",
            "in": "query",
            "description": "The maximum amount of time in minutes that a job is able run (in seconds).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "builds_access_level",
            "in": "query",
            "description": "One of disabled, private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "ci_config_path",
            "in": "query",
            "description": "The path to CI configuration file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "container_registry_enabled",
            "in": "query",
            "description": "Enable container registry for this project.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "default_branch",
            "in": "query",
            "description": "master by default.",
            "schema": {
              "type": "string",
              "default": "master"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Short project description.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emails_disabled",
            "in": "query",
            "description": "Disable email notifications.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "forking_access_level",
            "in": "query",
            "description": "One of disabled,private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "import_url",
            "in": "query",
            "description": "URL to import repository from. Either import_url or template_name is required, not both",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "initialize_with_readme",
            "in": "query",
            "description": "false by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "issues_access_level",
            "in": "query",
            "description": "One of disabled, private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "issues_enabled",
            "in": "query",
            "description": "(Deprecated)Enable issues for this project. Use issues_access_level instead.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "jobs_enabled",
            "in": "query",
            "description": "(Deprecated)Enable jobs for this project. Use builds_access_level instead.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lfs_enabled",
            "in": "query",
            "description": "Enable LFS.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "merge_method",
            "in": "query",
            "description": "Set the merge method used.",
            "schema": {
              "type": "string",
              "enum": [
                "merge",
                "rebase_merge",
                "ff"
              ]
            }
          },
          {
            "name": "merge_requests_access_level",
            "in": "query",
            "description": "One of disabled, private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "merge_requests_enabled",
            "in": "query",
            "description": "(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the new project. Either path or name is required, not both.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace_id",
            "in": "query",
            "description": "Namespace for the new project (defaults to the current user's namespace).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "only_allow_merge_if_all_discussions_are_resolved",
            "in": "query",
            "description": "Set whether merge requests can only be merged when all the discussions are resolved.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "only_allow_merge_if_pipeline_succeeds",
            "in": "query",
            "description": "Set whether merge requests can only be merged with successful jobs.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "packages_enabled",
            "in": "query",
            "description": "Enable or disable packages repository feature.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pages_access_level",
            "in": "query",
            "description": "One of disabled, private,enabled, or public.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled",
                "public"
              ]
            }
          },
          {
            "name": "requirements_access_level",
            "in": "query",
            "description": "One of disabled,private,enabled or public",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled",
                "public"
              ]
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "printing_merge_request_link_enabled",
            "in": "query",
            "description": "Show link to create/view merge request when pushing from the command line.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "public_builds",
            "in": "query",
            "description": "If true, jobs can be viewed by non-project members.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "remove_source_branch_after_merge",
            "in": "query",
            "description": "Enable Delete source branch option by default for all new merge requests.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "repository_access_level",
            "in": "query",
            "description": "One of disabled, private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "repository_storage",
            "in": "query",
            "description": "Which storage shard the repository is on.(admins only)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request_access_enabled",
            "in": "query",
            "description": "Allow users to request member access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "resolve_outdated_diff_discussions",
            "in": "query",
            "description": "Automatically resolve merge request diffs discussions on lines changed with a push.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "shared_runners_enabled",
            "in": "query",
            "description": "Enable shared runners for this project.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "show_default_award_emojis",
            "in": "query",
            "description": "Show default award emojis.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "snippets_access_level",
            "in": "query",
            "description": "One of disabled, private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "snippets_enabled",
            "in": "query",
            "description": "(Deprecated)Enable snippets for this project. Use snippets_access_level instead.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tag_list",
            "in": "query",
            "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "template_name",
            "in": "query",
            "description": "When used withoutuse_custom_template, name of abuilt-in project template. When used withuse_custom_template, name of a custom project template.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "See project visibility level.",
            "schema": {
              "type": "string",
              "enum": [
                "private",
                "internal",
                "public"
              ]
            }
          },
          {
            "name": "wiki_access_level",
            "in": "query",
            "description": "One of disabled, private, or enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "private",
                "enabled"
              ]
            }
          },
          {
            "name": "wiki_enabled",
            "in": "query",
            "description": "(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Update the image cleanup policy for this project.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ContainerExpirationPolicy"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Creates a new project owned by the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "container_expiration_policy_attributes"
      }
    },
    "/issues": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Get all issues the authenticated user has access to. By default it returns only issues created by the current user. To get all issues, use parameter scope=all.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items to list per page",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "assignee_id",
            "in": "query",
            "description": "Return issues assigned to the given user id . Mutually exclusive with assignee_username . None returns unassigned issues. Any returns issues with an assignee. ( Introduced in GitLab 9.5)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "assignee_username",
            "in": "query",
            "description": "Return issues assigned to the given username . Either assignee_username or assignee_id is required, not both. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "author_id",
            "in": "query",
            "description": "Return issues created by the given user id . Either author_id or author_username is required, not both. Combine with scope=all or scope=assigned_to_me . ( Introduced in GitLab 9.5)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "author_username",
            "in": "query",
            "description": "Return issues created by the given username . Similar to author_id and mutually exclusive with author_id .",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confidential",
            "in": "query",
            "description": "Filter confidential or public issues.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Return issues created on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Return issues created on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "due_date",
            "in": "query",
            "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "overdue",
                "week",
                "month",
                "next_month_and_previous_two_weeks"
              ]
            }
          },
          {
            "name": "iids[]",
            "in": "query",
            "description": "Return only the issues having the given iid",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "in",
            "in": "query",
            "description": "Modify the scope of the search attribute. title , description , or a string joining them with comma. Default is title,description",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "description",
                "title,description"
              ]
            }
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any"
              ]
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated list of label names, issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any",
                "No+Label"
              ]
            }
          },
          {
            "name": "my_reaction_emoji",
            "in": "query",
            "description": "Return issues reacted by the authenticated user by the given emoji . None returns issues not given a reaction. Any returns issues given at least one reaction. ( Introduced in GitLab 10.0)",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any"
              ]
            }
          },
          {
            "name": "non_archived",
            "in": "query",
            "description": "Return issues only from non-archived projects. If false , the response returns issues from both archived and non-archived projects. Default is true . (Introduced in GitLab 13.0 )",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return issues ordered by created_at , updated_at , priority , due_date , relative_position , label_priority , milestone_due , popularity , weight fields. Default is created_at",
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at",
                "priority",
                "due_date",
                "relative_position",
                "label_priority",
                "milestone_due",
                "popularity"
              ]
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Return issues for the given scope: created_by_me , assigned_to_me or all . Defaults to created_by_me For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. ( Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)",
            "schema": {
              "type": "string",
              "default": "created_by_me",
              "enum": [
                "created_by_me",
                "assigned_to_me",
                "all"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search issues against their title and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return issues sorted in asc or desc order. Default is desc",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return all issues or just those that are opened or closed",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "opened",
                "closed"
              ]
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "description": "Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_before",
            "in": "query",
            "description": "Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "with_labels_details",
            "in": "query",
            "description": "If true , the response returns more details for each label in labels field: :name , :color , :description , :description_html , :text_color . Default is false . The description_html attribute was introduced in GitLab 12.7",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Return issues that do not match the parameters supplied. Accepts: labels , milestone , author_id , author_username , assignee_id , assignee_username , my_reaction_emoji",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/NotIssue"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Get all issues the authenticated user has access to. By default it returns only issues created by the current user. To get all issues, use parameter scope=all.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "not"
      }
    },
    "/issues/{id}": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Only for administrators. Get a single issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Only for administrators. Get a single issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "Get a list of visible groups for the authenticated user. When accessed without authentication, only public groups are returned.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items to list per page",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "skip_groups",
            "in": "query",
            "description": "Skip the group IDs passed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "all_available",
            "in": "query",
            "description": "Show all the groups you have access to (defaults tofalsefor authenticated users,truefor admin); Attributesownedandmin_access_levelhave precedence",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return the list of authorized groups matching the search criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order groups byname,pathorid. Default is name",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "path",
                "id"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Order groups in asc or desc order. Default is asc",
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "desc",
                "asc"
              ]
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "Include group statistics (admins only)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_custom_attributes",
            "in": "query",
            "description": "Includecustom attributesin response (admins only)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "owned",
            "in": "query",
            "description": "Limit to groups explicitly owned by the current user",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_access_level",
            "in": "query",
            "description": "Limit to groups where current user has at least this access level",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                10,
                20,
                30,
                40,
                50
              ]
            }
          },
          {
            "name": "top_level_only",
            "in": "query",
            "description": "Limit to top level groups, excluding all subgroups",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of visible groups for the authenticated user. When accessed without authentication, only public groups are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "description": "Creates a new project group. Available only for users who can create groups.",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "description": "The group's visibility. Can be private,internal, orpublic.",
            "schema": {
              "type": "string",
              "enum": [
                "private",
                "internal",
                "public"
              ]
            }
          },
          {
            "name": "share_with_group_lock",
            "in": "query",
            "description": "Prevent sharing a project with another group within this group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require_two_factor_authentication",
            "in": "query",
            "description": "Require all users in this group to setup Two-factor authentication.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "two_factor_grace_period",
            "in": "query",
            "description": "Time before Two-factor authentication is enforced (in hours).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_creation_level",
            "in": "query",
            "description": "Determine if developers can create projects in the group. Can benoone(No one),maintainer(Maintainers), or developer(Developers + Maintainers).",
            "schema": {
              "type": "string",
              "enum": [
                "noone",
                "maintainer",
                "developer"
              ]
            }
          },
          {
            "name": "auto_devops_enabled",
            "in": "query",
            "description": "Default to Auto DevOps pipeline for all projects within this group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subgroup_creation_level",
            "in": "query",
            "description": "Allowed to create subgroups. Can be owner(Owners), or maintainer(Maintainers).",
            "schema": {
              "type": "string",
              "enum": [
                "owner",
                "maintainer"
              ]
            }
          },
          {
            "name": "emails_disabled",
            "in": "query",
            "description": "Disable email notifications",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mentions_disabled",
            "in": "query",
            "description": "Disable the capability of a group from getting mentioned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lfs_enabled",
            "in": "query",
            "description": "Enable/disable Large File Storage (LFS) for the projects in this group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request_access_enabled",
            "in": "query",
            "description": "Allow users to request member access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "The parent group ID for creating nested group.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "default_branch_protection",
            "in": "query",
            "description": "SeeOptions fordefault_branch_protection. Default to the global level default branch protection setting.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            }
          },
          {
            "name": "shared_runners_setting",
            "in": "query",
            "description": "SeeOptions forshared_runners_setting. Enable or disable shared runners for a group\u2019s subgroups and projects.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled_with_override",
                "disabled_and_unoverridable"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "name",
                  "path"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the group."
                  },
                  "path": {
                    "type": "string",
                    "description": "The path of the group."
                  },
                  "description": {
                    "type": "string",
                    "description": "The group's description."
                  },
                  "avatar": {
                    "type": "string",
                    "description": "Image file for avatar of the group.Introduced in GitLab 12.9",
                    "format": "file"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name",
                  "path"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the group."
                  },
                  "path": {
                    "type": "string",
                    "description": "The path of the group."
                  },
                  "description": {
                    "type": "string",
                    "description": "The group's description."
                  },
                  "avatar": {
                    "type": "string",
                    "description": "Image file for avatar of the group.Introduced in GitLab 12.9",
                    "format": "file"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Get a list of visible groups for the authenticated user. When accessed without authentication, only public groups are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}/issues": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Get a list of a group\u2019s issues.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items to list per page",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "assignee_id",
            "in": "query",
            "description": "Return issues assigned to the given user id . Mutually exclusive with assignee_username . None returns unassigned issues. Any returns issues with an assignee. ( Introduced in GitLab 9.5)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "assignee_username",
            "in": "query",
            "description": "Return issues assigned to the given username . Either assignee_username or assignee_id is required, not both.. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "author_id",
            "in": "query",
            "description": "Return issues created by the given user id . Mutually exclusive with author_username . Combine with scope=all or scope=assigned_to_me . ( Introduced in GitLab 9.5)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "author_username",
            "in": "query",
            "description": "Return issues created by the given username . Either author_username or author_id is required, not both.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confidential",
            "in": "query",
            "description": "Filter confidential or public issues.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Return issues created on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Return issues created on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "due_date",
            "in": "query",
            "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "overdue",
                "week",
                "month",
                "next_month_and_previous_two_weeks"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "iids[]",
            "in": "query",
            "description": "Return only the issues having the given iid",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated list of label names, issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any",
                "No+Label"
              ]
            }
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any"
              ]
            }
          },
          {
            "name": "my_reaction_emoji",
            "in": "query",
            "description": "Return issues reacted by the authenticated user by the given emoji . None returns issues not given a reaction. Any returns issues given at least one reaction. ( Introduced in GitLab 10.0)",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any"
              ]
            }
          },
          {
            "name": "non_archived",
            "in": "query",
            "description": "Return issues from non archived projects. Default is true. (Introduced in GitLab 12.8 )",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return issues ordered by created_at , updated_at , priority , due_date , relative_position , label_priority , milestone_due , popularity , weight fields. Default is created_at",
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at",
                "priority",
                "due_date",
                "relative_position",
                "label_priority",
                "milestone_due",
                "popularity"
              ]
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Return issues for the given scope: created_by_me , assigned_to_me or all . For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. ( Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)",
            "schema": {
              "type": "string",
              "enum": [
                "created_by_me",
                "assigned_to_me",
                "all"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search group issues against their title and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return issues sorted in asc or desc order. Default is desc",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return all issues or just those that are opened or closed",
            "schema": {
              "type": "string",
              "enum": [
                "opened",
                "closed"
              ]
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "description": "Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_before",
            "in": "query",
            "description": "Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "with_labels_details",
            "in": "query",
            "description": "If true , the response returns more details for each label in labels field: :name , :color , :description , :description_html , :text_color . Default is false . The description_html attribute was introduced in GitLab 12.7",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Return issues that do not match the parameters supplied. Accepts: labels , milestone , author_id , author_username , assignee_id , assignee_username , my_reaction_emoji , search , in",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/NotGroupsIssue"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Get all issues the authenticated user has access to. By default it returns only issues created by the current user. To get all issues, use parameter scope=all.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "not"
      }
    },
    "/projects/{id}/issues": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Get a list of a project\u2019s issues.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items to list per page",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "assignee_id",
            "in": "query",
            "description": "Return issues assigned to the given user id . Mutually exclusive with assignee_username . None returns unassigned issues. Any returns issues with an assignee. ( Introduced in GitLab 9.5)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "assignee_username",
            "in": "query",
            "description": "Return issues assigned to the given username . Either assignee_id or assignee_username is required, not both. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "author_id",
            "in": "query",
            "description": "Return issues created by the given user id . Mutually exclusive with author_username . Combine with scope=all or scope=assigned_to_me . ( Introduced in GitLab 9.5)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "author_username",
            "in": "query",
            "description": "Return issues created by the given username . Either author_id or author_username is required, not both.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confidential",
            "in": "query",
            "description": "Filter confidential or public issues.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Return issues created on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Return issues created on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "due_date",
            "in": "query",
            "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "overdue",
                "week",
                "month",
                "next_month_and_previous_two_weeks"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "iids[]",
            "in": "query",
            "description": "Return only the issues having the given iid",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated list of label names, issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any",
                "No+Label"
              ]
            }
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any"
              ]
            }
          },
          {
            "name": "my_reaction_emoji",
            "in": "query",
            "description": "Return issues reacted by the authenticated user by the given emoji . None returns issues not given a reaction. Any returns issues given at least one reaction. ( Introduced in GitLab 10.0)",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any"
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return issues ordered by created_at , updated_at , priority , due_date , relative_position , label_priority , milestone_due , popularity , weight fields. Default is created_at",
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at",
                "priority",
                "due_date",
                "relative_position",
                "label_priority",
                "milestone_due",
                "popularity"
              ]
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Return issues for the given scope: created_by_me , assigned_to_me or all . For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. ( Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)",
            "schema": {
              "type": "string",
              "enum": [
                "created_by_me",
                "assigned_to_me",
                "all"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search group issues against their title and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return issues sorted in asc or desc order. Default is desc",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return all issues or just those that are opened or closed",
            "schema": {
              "type": "string",
              "enum": [
                "opened",
                "closed"
              ]
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "description": "Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_before",
            "in": "query",
            "description": "Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "with_labels_details",
            "in": "query",
            "description": "If true , the response returns more details for each label in labels field: :name , :color , :description , :description_html , :text_color . Default is false . The description_html attribute was introduced in GitLab 12.7",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Return issues that do not match the parameters supplied. Accepts: labels , milestone , author_id , author_username , assignee_id , assignee_username , my_reaction_emoji , search , in",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/NotGroupsIssue"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Get all issues the authenticated user has access to. By default it returns only issues created by the current user. To get all issues, use parameter scope=all.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "not"
      },
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Creates a new project issue.",
        "parameters": [
          {
            "name": "assignee_ids",
            "in": "query",
            "description": "The ID of the user(s) to assign the issue to.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "confidential",
            "in": "query",
            "description": "Set an issue to be confidential. Default is false .",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z . Requires administrator or project/group owner rights.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of an issue. Limited to 1,048,576 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discussion_to_resolve",
            "in": "query",
            "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of .",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "due_date",
            "in": "query",
            "description": "The due date. Date time string in the format YYYY-MM-DD , for example 2016-03-11",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "iid",
            "in": "query",
            "description": "The internal ID of the project's issue (requires administratoror project owner rights)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated label names for an issue",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merge_request_to_resolve_discussions_of",
            "in": "query",
            "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "milestone_id",
            "in": "query",
            "description": "The global ID of a milestone to assign issue",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title of an issue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Creates a new project issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Get a single project issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of a project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Issue"
        ],
        "description": "Updates an existing project issue. This call is also used to mark an issue as closed.",
        "parameters": [
          {
            "name": "add_labels",
            "in": "query",
            "description": "Comma-separated label names to add to an issue.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignee_ids",
            "in": "query",
            "description": "The ID of the user(s) to assign the issue to. Set to 0 or provide an empty value to unassign all assignees.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "confidential",
            "in": "query",
            "description": "Updates an issue to be confidential. At least one of the following parameters is required for the request to be successful: assignee_id, assignee_ids, confidential, created_at, description, discussion_locked, due_date, labels, milestone_id, state_event, title",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of an issue. Limited to 1,048,576 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discussion_locked",
            "in": "query",
            "description": "Flag indicating if the issue's discussion is locked. If the discussion is locked only project members can add or edit comments.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "due_date",
            "in": "query",
            "description": "The due date. Date time string in the format YYYY-MM-DD , for example 2016-03-11",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of a project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated label names for an issue. Set to an empty string to unassign all labels.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "milestone_id",
            "in": "query",
            "description": "The global ID of a milestone to assign the issue to. Set to 0 or provide an empty value to unassign a milestone.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "remove_labels",
            "in": "query",
            "description": "Comma-separated label names to remove from an issue.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state_event",
            "in": "query",
            "description": "The state event of an issue. Set close to close the issue and reopen to reopen it",
            "schema": {
              "type": "string",
              "enum": [
                "close",
                "reopen"
              ]
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title of an issue",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z (requires administrator or project owner rights). Empty string or null values are not accepted.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates an existing project issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Issue"
        ],
        "description": "Only for administrators and project owners. Deletes an issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of a project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Only for administrators and project owners. Deletes an issue.",
            "content": {}
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/reorder": {
      "put": {
        "tags": [
          "Issue"
        ],
        "description": "Reorders an issue, you can see the results when sorting issues manually",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "move_after_id",
            "in": "query",
            "description": "The ID of a project\u2019s issue that should be placed after this issue, If move_after_id is not present, move_before_id is required",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "move_before_id",
            "in": "query",
            "description": "The ID of a project\u2019s issue that should be placed before this issue",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reorders an issue, you can see the results when sorting issues manually",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/move": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Moves an issue to a different project.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to_project_id",
            "in": "query",
            "description": "The ID of the new project",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moves an issue to a different project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/subscribe": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Subscribes the authenticated user to an issue to receive notifications.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribes the authenticated user to an issue to receive notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/unsubscribe": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Unsubscribes the authenticated user from the issue to not receive notifications from it",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribes the authenticated user to an issue to receive notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/todo": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Manually creates a to-do item for the current user on an issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Manually creates a to-do item for the current user on an issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/time_estimate": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Sets an estimated time of work for this issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "description": "The duration in human format. e.g: 3h30m",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sets an estimated time of work for this issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEstimate"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/reset_time_estimate": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Resets the estimated time for this issue to 0 seconds.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resets the estimated time for this issue to 0 seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEstimate"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/add_spent_time": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Adds spent time for this issue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "description": "The duration in human format. e.g: 3h30m",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Adds spent time for this issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEstimate"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/reset_spent_time": {
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Resets the total spent time for this issue to 0 seconds.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resets the total spent time for this issue to 0 seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEstimate"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/time_stats": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "If the project is private or the issue is confidential, you need to provide credentials to authorize. The preferred way to do this, is by using personal access tokens.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the project is private or the issue is confidential, you need to provide credentials to authorize. The preferred way to do this, is by using personal access tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEstimate"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/related_merge_requests": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Get all the merge requests that are related to the issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all the merge requests that are related to the issue.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MergeRequest"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/closed_by": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Get all merge requests that close a particular issue when merged.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all merge requests that close a particular issue when merged.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MergeRequest"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/participants": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "Participants on issues",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of the project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Participants on issues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Author"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues/{issue_iid}/metric_images": {
      "get": {
        "tags": [
          "Issue"
        ],
        "description": "List metric image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of a project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List metric image",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricImage"
                  }
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Issue"
        ],
        "description": "Upload metric image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "issue_iid",
            "in": "path",
            "description": "The internal ID of a project's issue",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to view more metric information",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The image file to be uploaded",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Upload metric image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricImage"
                }
              }
            }
          },
          "default": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          }
        }
      },
      "RepoCommit": {
        "type": "object",
        "properties": {
          "authored_date": {
            "type": "string"
          },
          "author_name": {
            "type": "string"
          },
          "author_email": {
            "type": "string"
          },
          "committer_email": {
            "type": "string"
          },
          "committer_name": {
            "type": "string"
          },
          "committer_date": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "short_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "parent_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "id": "ed899a2f4b50b4370feeea94676502b42383c746",
          "short_id": "ed899a2f4b5",
          "title": "Replace sanitize with escape once",
          "author_name": "Example User",
          "author_email": "user@example.com",
          "authored_date": "2012-09-20T08:50:22Z",
          "committer_name": "Administrator",
          "committer_email": "admin@example.com",
          "committed_date": "2012-09-20T08:50:22Z",
          "created_at": "2012-09-20T08:50:22Z",
          "message": "Replace sanitize with escape once",
          "parent_ids": [
            "6104942438c14ec7bd21c6cd5bd995272b3faff6"
          ],
          "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746"
        }
      },
      "Action": {
        "required": [
          "action",
          "file_path"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action to perform",
            "enum": [
              "create",
              "delete",
              "move",
              "update",
              "chmod"
            ]
          },
          "file_path": {
            "type": "string",
            "description": "The full path to the file"
          },
          "previous_path": {
            "type": "string",
            "description": "The original full path to the file being moved"
          },
          "content": {
            "type": "string",
            "description": "The file content, required for all except `delete` and optional for `move`"
          },
          "encoding": {
            "type": "string",
            "description": "The file encoding",
            "default": "text",
            "enum": [
              "base64",
              "text"
            ]
          },
          "last_commit_id": {
            "type": "string",
            "description": "Last known file commit ID. Will be only considered in update, move, and delete actions."
          },
          "execute_filemode": {
            "type": "boolean",
            "description": "When true/false enables/disables the execute flag on the file. Only considered for chmod action."
          }
        },
        "example": {
          "action": "create",
          "file_path": "/home/user/commit_this.txt",
          "previous_path": "/home/user/commit_this.txt",
          "content": "This is content",
          "encoding": "text"
        }
      },
      "Actions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Action"
        }
      },
      "RepoCommitDetail": {
        "type": "object",
        "properties": {
          "author_email": {
            "type": "string"
          },
          "author_name": {
            "type": "string"
          },
          "authored_date": {
            "type": "string"
          },
          "committed_date": {
            "type": "string"
          },
          "committer_email": {
            "type": "string"
          },
          "committer_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parent_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "short_id": {
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/RepoCommitStats"
          },
          "last_pipeline": {
            "$ref": "#/components/schemas/RepoCommitLastPipeline"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "description": "Get a specific commit of a project",
        "example": {
          "id": "ed899a2f4b50b4370feeea94676502b42383c746",
          "short_id": "ed899a2f4b5",
          "title": "some commit message",
          "author_name": "Example User",
          "author_email": "user@example.com",
          "committer_name": "Example User",
          "committer_email": "user@example.com",
          "created_at": "2016-09-20T16:26:24Z",
          "message": "some commit message",
          "parent_ids": [
            "ae1d9fb46aa2b07ee9836d49862ec4e2c46fbbba"
          ],
          "committed_date": "2016-09-20T16:26:24Z",
          "authored_date": "2016-09-20T16:26:24Z",
          "last_pipeline": {
            "id": 8,
            "ref": "master",
            "sha": "2dc6aa325a317eda67812f05600bdf0fcdc70ab0",
            "status": "created"
          },
          "stats": {
            "additions": 2,
            "deletions": 2,
            "total": 4
          },
          "status": "running",
          "web_url": "https://gitlab.example.com/thedude/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746"
        }
      },
      "RepoCommitLastPipeline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "RepoCommitStats": {
        "type": "object",
        "properties": {
          "additions": {
            "type": "integer"
          },
          "deletions": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "RepoCommitRefs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "branch",
              "tag",
              "all"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RepoCommitDiff": {
        "type": "object",
        "properties": {
          "a_mode": {
            "type": "string"
          },
          "b_mode": {
            "type": "string"
          },
          "deleted_file": {
            "type": "string"
          },
          "diff": {
            "type": "string"
          },
          "new_file": {
            "type": "string"
          },
          "new_path": {
            "type": "string"
          },
          "old_path": {
            "type": "string"
          },
          "renamed_file": {
            "type": "string"
          }
        },
        "example": {
          "diff": "--- a/doc/update/5.4-to-6.0.md\\n +++ b/doc/update/5.4-to-6.0.md\\n@@ -71,6 +71,8\\n@@ sudo -u git -H\\nbundle exec rake migrate_keys RAILS_ENV=production\\nsudo -u git -H bundle exec rake\\nmigrate_inline_notes RAILS_ENV=production\\n\\n+sudo -u git -H bundle exec rake gitlab:assets:compile RAILS_ENV=production+\\n```\\n6. Update config files",
          "new_path": "doc/update/5.4-to-6.0.md",
          "old_path": "doc/update/5.4-to-6.0.md",
          "b_mode": "100644",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false
        }
      },
      "RepoCommitComment": {
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "created_at": {
            "type": "string"
          },
          "line_type": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "line": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          }
        },
        "example": {
          "author": {
            "web_url": "https://gitlab.example.com/thedude",
            "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png",
            "username": "thedude",
            "state": "active",
            "name": "Jeff Lebowski",
            "id": 28
          },
          "created_at": "2016-01-19T09:44:55.600Z",
          "line_type": "new",
          "path": "dudeism.md",
          "line": 11,
          "note": "Nice picture man!"
        }
      },
      "Author": {
        "type": "object",
        "properties": {
          "web_url": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "example": [
          {
            "id": 1,
            "username": "john_smith",
            "name": "John Smith",
            "state": "active",
            "avatar_url": "http://localhost:3000/uploads/user/avatar/1/cd8.jpeg",
            "web_url": "http://localhost:3000/john_smith"
          },
          {
            "id": 2,
            "username": "jack_smith",
            "name": "Jack Smith",
            "state": "blocked",
            "avatar_url": "http://gravatar.com/../e32131cd8.jpeg",
            "web_url": "http://localhost:3000/jack_smith"
          }
        ]
      },
      "RepoCommitDiscussion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "individual_note": {
            "type": "boolean"
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        },
        "example": [
          {
            "id": "4604744a1c64de00ff62e1e8a6766919923d2b41",
            "individual_note": true,
            "notes": [
              {
                "id": 334686748,
                "body": "I'm the Dude, so that's what you call me.",
                "author": {
                  "id": 28,
                  "name": "Jeff Lebowski",
                  "username": "thedude",
                  "web_url": "https://gitlab.example.com/thedude",
                  "state": "active",
                  "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png"
                },
                "created_at": "2020-04-30T18:48:11.432Z",
                "updated_at": "2020-04-30T18:48:11.432Z",
                "system": false,
                "noteable_type": "Commit",
                "resolvable": false,
                "commands_changes": {}
              }
            ]
          }
        ]
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "attachment": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "noteable_id": {
            "type": "integer"
          },
          "noteable_type": {
            "type": "string"
          },
          "resolvable": {
            "type": "boolean"
          },
          "confidential": {
            "type": "string"
          },
          "noteable_iid": {
            "type": "integer"
          },
          "commands_changes": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "CommitStatus": {
        "type": "object",
        "properties": {
          "allow_failure": {
            "type": "boolean"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "target_url": {
            "type": "string"
          },
          "coverage": {
            "type": "string"
          }
        },
        "example": [
          {
            "status": "pending",
            "created_at": "2016-01-19T08:40:25.934Z",
            "name": "bundler:audit",
            "allow_failure": true,
            "author": {
              "username": "thedude",
              "state": "active",
              "web_url": "https://gitlab.example.com/thedude",
              "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png",
              "id": 28,
              "name": "Jeff Lebowski"
            },
            "sha": "18f3e63d05582537db6d183d9d557be09e1f90c8",
            "target_url": "https://gitlab.example.com/thedude/gitlab-foss/builds/91",
            "id": 91,
            "ref": "master"
          },
          {
            "name": "test",
            "allow_failure": false,
            "status": "pending",
            "created_at": "2016-01-19T08:40:25.832Z",
            "target_url": "https://gitlab.example.com/thedude/gitlab-foss/builds/90",
            "id": 90,
            "ref": "master",
            "sha": "18f3e63d05582537db6d183d9d557be09e1f90c8",
            "author": {
              "id": 28,
              "name": "Jeff Lebowski",
              "username": "thedude",
              "web_url": "https://gitlab.example.com/thedude",
              "state": "active",
              "avatar_url": "https://gitlab.example.com/uploads/user/avatar/28/The-Big-Lebowski-400-400.png"
            }
          }
        ]
      },
      "MergeRequests": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "iid": {
            "type": "integer"
          },
          "project_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "source_branch": {
            "type": "string"
          },
          "upvotes": {
            "type": "integer"
          },
          "downvotes": {
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "assignee": {
            "type": "string"
          },
          "source_project_id": {
            "type": "integer"
          },
          "target_project_id": {
            "type": "integer"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "work_in_progress": {
            "type": "boolean"
          },
          "milestone": {
            "type": "string"
          },
          "merge_when_pipeline_succeeds": {
            "type": "integer"
          },
          "merge_status": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "squash_commit_sha": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "integer"
          },
          "discussion_locked": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "boolean"
          },
          "web_url": {
            "type": "string"
          },
          "time_stats": {
            "$ref": "#/components/schemas/TimeStats"
          }
        }
      },
      "TimeStats": {
        "type": "object",
        "properties": {
          "time_estimate": {
            "type": "integer"
          },
          "total_time_spent": {
            "type": "integer"
          },
          "human_time_estimate": {
            "type": "string"
          },
          "human_total_time_spent": {
            "type": "string"
          }
        }
      },
      "Signature": {
        "type": "object",
        "properties": {
          "signature_type": {
            "type": "string"
          },
          "verification_status": {
            "type": "string"
          },
          "gpg_key_id": {
            "type": "integer"
          },
          "gpg_key_primary_keyid": {
            "type": "string"
          },
          "gpg_key_user_name": {
            "type": "string"
          },
          "gpg_key_user_email": {
            "type": "string"
          },
          "gpg_key_subkey_id": {
            "type": "string"
          },
          "commit_source": {
            "type": "string"
          },
          "x509_certificate": {
            "$ref": "#/components/schemas/X509Certificate"
          }
        },
        "example": [
          {
            "signature_type": "X509",
            "verification_status": "unverified",
            "x509_certificate": {
              "id": 1,
              "subject": "CN=gitlab@example.org,OU=Example,O=World",
              "subject_key_identifier": "BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC:BC",
              "email": "gitlab@example.org",
              "serial_number": 2.7896956101890133e+38,
              "certificate_status": "good",
              "x509_issuer": {
                "id": 1,
                "subject": "CN=PKI,OU=Example,O=World",
                "subject_key_identifier": "AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB:AB",
                "crl_url": "http://example.com/pki.crl"
              }
            },
            "commit_source": "gitaly"
          },
          {
            "signature_type": "PGP",
            "verification_status": "verified",
            "gpg_key_id": 1,
            "gpg_key_primary_keyid": "8254AAB3FBD54AC9",
            "gpg_key_user_name": "John Doe",
            "gpg_key_user_email": "johndoe@example.com",
            "commit_source": "gitaly"
          }
        ]
      },
      "X509Certificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "subject": {
            "type": "string"
          },
          "subject_key_identifier": {
            "type": "string"
          },
          "serial_number": {
            "type": "number"
          },
          "certificate_status": {
            "type": "string"
          },
          "x509_issuer": {
            "$ref": "#/components/schemas/X509Issuer"
          }
        }
      },
      "X509Issuer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "subject": {
            "type": "string"
          },
          "subject_key_identifier": {
            "type": "string"
          },
          "crl_url": {
            "type": "string"
          }
        }
      },
      "BasicProjectDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "readme_url": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "wiki_enabled": {
            "type": "boolean"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "creator_id": {
            "type": "integer"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "import_status": {
            "type": "string"
          },
          "import_error": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "archived": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "forks_count": {
            "type": "integer"
          },
          "star_count": {
            "type": "integer"
          },
          "runners_token": {
            "type": "string"
          },
          "ci_default_git_depth": {
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "type": "boolean"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "merge_method": {
            "type": "string"
          },
          "auto_devops_enabled": {
            "type": "boolean"
          },
          "suggestion_commit_message": {
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "marked_for_deletion_at": {
            "type": "string",
            "format": "date"
          },
          "marked_for_deletion_on": {
            "type": "string",
            "format": "date"
          },
          "approvals_before_merge": {
            "type": "integer"
          },
          "mirror": {
            "type": "boolean"
          },
          "mirror_user_id": {
            "type": "integer"
          },
          "mirror_trigger_builds": {
            "type": "boolean"
          },
          "only_mirror_protected_branches": {
            "type": "boolean"
          },
          "mirror_overwrites_diverged_branches": {
            "type": "boolean"
          },
          "external_authorization_classification_label": {
            "type": "string"
          },
          "packages_enabled": {
            "type": "boolean"
          },
          "service_desk_enabled": {
            "type": "boolean"
          },
          "service_desk_address": {
            "type": "string"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "statistics": {
            "$ref": "#/components/schemas/Statistics"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "example": [
          {
            "id": 4,
            "default_branch": "master",
            "visibility": "private",
            "ssh_url_to_repo": "git@example.com:diaspora/diaspora-client.git",
            "http_url_to_repo": "http://example.com/diaspora/diaspora-client.git",
            "web_url": "http://example.com/diaspora/diaspora-client",
            "readme_url": "http://example.com/diaspora/diaspora-client/blob/master/README.md",
            "tag_list": [
              "example",
              "disapora client"
            ],
            "owner": {
              "id": 3,
              "name": "Diaspora",
              "created_at": "2013-09-30T13:46:02Z"
            },
            "name": "Diaspora Client",
            "name_with_namespace": "Diaspora / Diaspora Client",
            "path": "diaspora-client",
            "path_with_namespace": "diaspora/diaspora-client",
            "issues_enabled": true,
            "open_issues_count": 1,
            "merge_requests_enabled": true,
            "jobs_enabled": true,
            "wiki_enabled": true,
            "snippets_enabled": false,
            "can_create_merge_request_in": true,
            "resolve_outdated_diff_discussions": false,
            "container_registry_enabled": false,
            "created_at": "2013-09-30T13:46:02Z",
            "last_activity_at": "2013-09-30T13:46:02Z",
            "creator_id": 3,
            "namespace": {
              "id": 3,
              "name": "Diaspora",
              "path": "diaspora",
              "kind": "group",
              "full_path": "diaspora"
            },
            "import_status": "none",
            "archived": false,
            "avatar_url": "http://example.com/uploads/project/avatar/4/uploads/avatar.png",
            "shared_runners_enabled": true,
            "forks_count": 0,
            "star_count": 0,
            "runners_token": "b8547b1dc37721d05889db52fa2f02",
            "ci_default_git_depth": 50,
            "ci_forward_deployment_enabled": true,
            "public_jobs": true,
            "shared_with_groups": [],
            "only_allow_merge_if_pipeline_succeeds": false,
            "allow_merge_on_skipped_pipeline": false,
            "only_allow_merge_if_all_discussions_are_resolved": false,
            "remove_source_branch_after_merge": false,
            "request_access_enabled": false,
            "merge_method": "merge",
            "autoclose_referenced_issues": true,
            "marked_for_deletion_at": "2020-04-03T00:00:00Z",
            "marked_for_deletion_on": "2020-04-03T00:00:00Z",
            "statistics": {
              "commit_count": 37,
              "storage_size": 1038090,
              "repository_size": 1038090,
              "wiki_size": 0,
              "lfs_objects_size": 0,
              "job_artifacts_size": 0,
              "packages_size": 0,
              "snippets_size": 0
            },
            "_links": {
              "self": "http://example.com/api/v4/projects",
              "issues": "http://example.com/api/v4/projects/1/issues",
              "merge_requests": "http://example.com/api/v4/projects/1/merge_requests",
              "repo_branches": "http://example.com/api/v4/projects/1/repository_branches",
              "labels": "http://example.com/api/v4/projects/1/labels",
              "events": "http://example.com/api/v4/projects/1/events",
              "members": "http://example.com/api/v4/projects/1/members"
            }
          },
          {
            "id": 6,
            "default_branch": "master",
            "visibility": "private",
            "ssh_url_to_repo": "git@example.com:brightbox/puppet.git",
            "http_url_to_repo": "http://example.com/brightbox/puppet.git",
            "web_url": "http://example.com/brightbox/puppet",
            "readme_url": "http://example.com/brightbox/puppet/blob/master/README.md",
            "tag_list": [
              "example",
              "puppet"
            ],
            "owner": {
              "id": 4,
              "name": "Brightbox",
              "created_at": "2013-09-30T13:46:02Z"
            },
            "name": "Puppet",
            "name_with_namespace": "Brightbox / Puppet",
            "path": "puppet",
            "path_with_namespace": "brightbox/puppet",
            "issues_enabled": true,
            "open_issues_count": 1,
            "merge_requests_enabled": true,
            "jobs_enabled": true,
            "wiki_enabled": true,
            "snippets_enabled": false,
            "can_create_merge_request_in": true,
            "resolve_outdated_diff_discussions": false,
            "container_registry_enabled": false,
            "created_at": "2013-09-30T13:46:02Z",
            "last_activity_at": "2013-09-30T13:46:02Z",
            "creator_id": 3,
            "namespace": {
              "id": 4,
              "name": "Brightbox",
              "path": "brightbox",
              "kind": "group",
              "full_path": "brightbox"
            },
            "import_status": "none",
            "permissions": {
              "project_access": {
                "access_level": 10,
                "notification_level": 3
              },
              "group_access": {
                "access_level": 50,
                "notification_level": 3
              }
            },
            "archived": false,
            "shared_runners_enabled": true,
            "forks_count": 0,
            "star_count": 0,
            "runners_token": "b8547b1dc37721d05889db52fa2f02",
            "ci_default_git_depth": 0,
            "ci_forward_deployment_enabled": true,
            "public_jobs": true,
            "shared_with_groups": [],
            "only_allow_merge_if_pipeline_succeeds": false,
            "allow_merge_on_skipped_pipeline": false,
            "only_allow_merge_if_all_discussions_are_resolved": false,
            "remove_source_branch_after_merge": false,
            "request_access_enabled": false,
            "merge_method": "merge",
            "auto_devops_enabled": true,
            "auto_devops_deploy_strategy": "continuous",
            "repository_storage": "default",
            "approvals_before_merge": 0,
            "mirror": false,
            "mirror_user_id": 45,
            "mirror_trigger_builds": false,
            "only_mirror_protected_branches": false,
            "mirror_overwrites_diverged_branches": false,
            "packages_enabled": true,
            "service_desk_enabled": false,
            "autoclose_referenced_issues": true,
            "statistics": {
              "commit_count": 12,
              "storage_size": 2066080,
              "repository_size": 2066080,
              "wiki_size": 0,
              "lfs_objects_size": 0,
              "job_artifacts_size": 0,
              "packages_size": 0,
              "snippets_size": 0
            },
            "_links": {
              "self": "http://example.com/api/v4/projects",
              "issues": "http://example.com/api/v4/projects/1/issues",
              "merge_requests": "http://example.com/api/v4/projects/1/merge_requests",
              "repo_branches": "http://example.com/api/v4/projects/1/repository_branches",
              "labels": "http://example.com/api/v4/projects/1/labels",
              "events": "http://example.com/api/v4/projects/1/events",
              "members": "http://example.com/api/v4/projects/1/members"
            }
          }
        ]
      },
      "ArchiveProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "readme_url": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "wiki_enabled": {
            "type": "boolean"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "creator_id": {
            "type": "integer"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "import_status": {
            "type": "string"
          },
          "import_error": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "archived": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "license_url": {
            "type": "string"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "forks_count": {
            "type": "integer"
          },
          "star_count": {
            "type": "integer"
          },
          "runners_token": {
            "type": "string"
          },
          "ci_default_git_depth": {
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "type": "boolean"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "merge_method": {
            "type": "string"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "suggestion_commit_message": {
            "type": "string"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "example": {
          "id": 3,
          "default_branch": "master",
          "visibility": "private",
          "ssh_url_to_repo": "git@example.com:diaspora/diaspora-project-site.git",
          "http_url_to_repo": "http://example.com/diaspora/diaspora-project-site.git",
          "web_url": "http://example.com/diaspora/diaspora-project-site",
          "readme_url": "http://example.com/diaspora/diaspora-project-site/blob/master/README.md",
          "tag_list": [
            "example",
            "disapora project"
          ],
          "owner": {
            "id": 3,
            "name": "Diaspora",
            "created_at": "2013-09-30T13:46:02Z"
          },
          "name": "Diaspora Project Site",
          "name_with_namespace": "Diaspora / Diaspora Project Site",
          "path": "diaspora-project-site",
          "path_with_namespace": "diaspora/diaspora-project-site",
          "issues_enabled": true,
          "open_issues_count": 1,
          "merge_requests_enabled": true,
          "jobs_enabled": true,
          "wiki_enabled": true,
          "snippets_enabled": false,
          "can_create_merge_request_in": true,
          "resolve_outdated_diff_discussions": false,
          "container_registry_enabled": false,
          "created_at": "2013-09-30T13:46:02Z",
          "last_activity_at": "2013-09-30T13:46:02Z",
          "creator_id": 3,
          "namespace": {
            "id": 3,
            "name": "Diaspora",
            "path": "diaspora",
            "kind": "group",
            "full_path": "diaspora"
          },
          "import_status": "none",
          "permissions": {
            "project_access": {
              "access_level": 10,
              "notification_level": 3
            },
            "group_access": {
              "access_level": 50,
              "notification_level": 3
            }
          },
          "archived": true,
          "avatar_url": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
          "license_url": "http://example.com/diaspora/diaspora-client/blob/master/LICENSE",
          "license": {
            "key": "lgpl-3.0",
            "name": "GNU Lesser General Public License v3.0",
            "nickname": "GNU LGPLv3",
            "html_url": "http://choosealicense.com/licenses/lgpl-3.0/",
            "source_url": "http://www.gnu.org/licenses/lgpl-3.0.txt"
          },
          "shared_runners_enabled": true,
          "forks_count": 0,
          "star_count": 0,
          "runners_token": "b8bc4a7a29eb76ea83cf79e4908c2b",
          "ci_default_git_depth": 50,
          "ci_forward_deployment_enabled": true,
          "public_jobs": true,
          "shared_with_groups": [],
          "only_allow_merge_if_pipeline_succeeds": false,
          "allow_merge_on_skipped_pipeline": false,
          "only_allow_merge_if_all_discussions_are_resolved": false,
          "remove_source_branch_after_merge": false,
          "request_access_enabled": false,
          "merge_method": "merge",
          "autoclose_referenced_issues": true,
          "_links": {
            "self": "http://example.com/api/v4/projects",
            "issues": "http://example.com/api/v4/projects/1/issues",
            "merge_requests": "http://example.com/api/v4/projects/1/merge_requests",
            "repo_branches": "http://example.com/api/v4/projects/1/repository_branches",
            "labels": "http://example.com/api/v4/projects/1/labels",
            "events": "http://example.com/api/v4/projects/1/events",
            "members": "http://example.com/api/v4/projects/1/members"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "readme_url": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "wiki_enabled": {
            "type": "boolean"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "creator_id": {
            "type": "integer"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "import_status": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "forks_count": {
            "type": "integer"
          },
          "star_count": {
            "type": "integer"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "merge_method": {
            "type": "string"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "suggestion_commit_message": {
            "type": "string"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "example": [
          {
            "id": 3,
            "default_branch": "master",
            "visibility": "internal",
            "ssh_url_to_repo": "git@example.com:diaspora/diaspora-project-site.git",
            "http_url_to_repo": "http://example.com/diaspora/diaspora-project-site.git",
            "web_url": "http://example.com/diaspora/diaspora-project-site",
            "readme_url": "http://example.com/diaspora/diaspora-project-site/blob/master/README.md",
            "tag_list": [
              "example",
              "disapora project"
            ],
            "name": "Diaspora Project Site",
            "name_with_namespace": "Diaspora / Diaspora Project Site",
            "path": "diaspora-project-site",
            "path_with_namespace": "diaspora/diaspora-project-site",
            "issues_enabled": true,
            "open_issues_count": 1,
            "merge_requests_enabled": true,
            "jobs_enabled": true,
            "wiki_enabled": true,
            "snippets_enabled": false,
            "can_create_merge_request_in": true,
            "resolve_outdated_diff_discussions": false,
            "container_registry_enabled": false,
            "created_at": "2013-09-30T13:46:02Z",
            "last_activity_at": "2013-09-30T13:46:02Z",
            "creator_id": 3,
            "namespace": {
              "id": 3,
              "name": "Diaspora",
              "path": "diaspora",
              "kind": "group",
              "full_path": "diaspora"
            },
            "import_status": "none",
            "archived": true,
            "avatar_url": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
            "shared_runners_enabled": true,
            "forks_count": 0,
            "star_count": 1,
            "public_jobs": true,
            "shared_with_groups": [],
            "only_allow_merge_if_pipeline_succeeds": false,
            "allow_merge_on_skipped_pipeline": false,
            "only_allow_merge_if_all_discussions_are_resolved": false,
            "remove_source_branch_after_merge": false,
            "request_access_enabled": false,
            "merge_method": "merge",
            "autoclose_referenced_issues": true,
            "_links": {
              "self": "http://example.com/api/v4/projects",
              "issues": "http://example.com/api/v4/projects/1/issues",
              "merge_requests": "http://example.com/api/v4/projects/1/merge_requests",
              "repo_branches": "http://example.com/api/v4/projects/1/repository_branches",
              "labels": "http://example.com/api/v4/projects/1/labels",
              "events": "http://example.com/api/v4/projects/1/events",
              "members": "http://example.com/api/v4/projects/1/members"
            }
          }
        ]
      },
      "StarProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "readme_url": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "wiki_enabled": {
            "type": "boolean"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "creator_id": {
            "type": "integer"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "import_status": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "license_url": {
            "type": "string"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "forks_count": {
            "type": "integer"
          },
          "star_count": {
            "type": "integer"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "merge_method": {
            "type": "string"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "suggestion_commit_message": {
            "type": "string"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "example": {
          "id": 3,
          "default_branch": "master",
          "visibility": "internal",
          "ssh_url_to_repo": "git@example.com:diaspora/diaspora-project-site.git",
          "http_url_to_repo": "http://example.com/diaspora/diaspora-project-site.git",
          "web_url": "http://example.com/diaspora/diaspora-project-site",
          "readme_url": "http://example.com/diaspora/diaspora-project-site/blob/master/README.md",
          "tag_list": [
            "example",
            "disapora project"
          ],
          "name": "Diaspora Project Site",
          "name_with_namespace": "Diaspora / Diaspora Project Site",
          "path": "diaspora-project-site",
          "path_with_namespace": "diaspora/diaspora-project-site",
          "issues_enabled": true,
          "open_issues_count": 1,
          "merge_requests_enabled": true,
          "jobs_enabled": true,
          "wiki_enabled": true,
          "snippets_enabled": false,
          "can_create_merge_request_in": true,
          "resolve_outdated_diff_discussions": false,
          "container_registry_enabled": false,
          "created_at": "2013-09-30T13:46:02Z",
          "last_activity_at": "2013-09-30T13:46:02Z",
          "creator_id": 3,
          "namespace": {
            "id": 3,
            "name": "Diaspora",
            "path": "diaspora",
            "kind": "group",
            "full_path": "diaspora"
          },
          "import_status": "none",
          "archived": true,
          "avatar_url": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
          "license_url": "http://example.com/diaspora/diaspora-client/blob/master/LICENSE",
          "license": {
            "key": "lgpl-3.0",
            "name": "GNU Lesser General Public License v3.0",
            "nickname": "GNU LGPLv3",
            "html_url": "http://choosealicense.com/licenses/lgpl-3.0/",
            "source_url": "http://www.gnu.org/licenses/lgpl-3.0.txt"
          },
          "shared_runners_enabled": true,
          "forks_count": 0,
          "star_count": 1,
          "public_jobs": true,
          "shared_with_groups": [],
          "only_allow_merge_if_pipeline_succeeds": false,
          "allow_merge_on_skipped_pipeline": false,
          "only_allow_merge_if_all_discussions_are_resolved": false,
          "remove_source_branch_after_merge": false,
          "request_access_enabled": false,
          "merge_method": "merge",
          "autoclose_referenced_issues": true,
          "_links": {
            "self": "http://example.com/api/v4/projects",
            "issues": "http://example.com/api/v4/projects/1/issues",
            "merge_requests": "http://example.com/api/v4/projects/1/merge_requests",
            "repo_branches": "http://example.com/api/v4/projects/1/repository_branches",
            "labels": "http://example.com/api/v4/projects/1/labels",
            "events": "http://example.com/api/v4/projects/1/events",
            "members": "http://example.com/api/v4/projects/1/members"
          }
        }
      },
      "ProjectWithAcess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "readme_url": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "wiki_enabled": {
            "type": "boolean"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "container_expiration_policy": {
            "$ref": "#/components/schemas/ContainerExpirationPolicy"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "creator_id": {
            "type": "integer"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "import_status": {
            "type": "string"
          },
          "import_error": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "archived": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "license_url": {
            "type": "string"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "forks_count": {
            "type": "integer"
          },
          "star_count": {
            "type": "integer"
          },
          "runners_token": {
            "type": "string"
          },
          "ci_default_git_depth": {
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "type": "boolean"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "printing_merge_requests_link_enabled": {
            "type": "boolean"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "merge_method": {
            "type": "string"
          },
          "auto_devops_enabled": {
            "type": "boolean"
          },
          "suggestion_commit_message": {
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "marked_for_deletion_at": {
            "type": "string",
            "format": "date"
          },
          "marked_for_deletion_on": {
            "type": "string",
            "format": "date"
          },
          "approvals_before_merge": {
            "type": "integer"
          },
          "compliance_frameworks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mirror": {
            "type": "boolean"
          },
          "mirror_user_id": {
            "type": "integer"
          },
          "mirror_trigger_builds": {
            "type": "boolean"
          },
          "only_mirror_protected_branches": {
            "type": "boolean"
          },
          "mirror_overwrites_diverged_branches": {
            "type": "boolean"
          },
          "external_authorization_classification_label": {
            "type": "string"
          },
          "packages_enabled": {
            "type": "boolean"
          },
          "service_desk_enabled": {
            "type": "boolean"
          },
          "service_desk_address": {
            "type": "string"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "statistics": {
            "$ref": "#/components/schemas/Statistics"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "forked_from_project": {
            "$ref": "#/components/schemas/ForkedFromProject"
          }
        },
        "example": {
          "id": 3,
          "forked_from_project": {
            "id": 13083,
            "description": "GitLab Community Edition",
            "name": "GitLab Community Edition",
            "name_with_namespace": "GitLab.org / GitLab Community Edition",
            "path": "gitlab-foss",
            "path_with_namespace": "gitlab-org/gitlab-foss",
            "created_at": "2013-09-26T06:02:36Z",
            "default_branch": "master",
            "tag_list": [],
            "ssh_url_to_repo": "git@gitlab.com:gitlab-org/gitlab-foss.git",
            "http_url_to_repo": "https://gitlab.com/gitlab-org/gitlab-foss.git",
            "web_url": "https://gitlab.com/gitlab-org/gitlab-foss",
            "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/project/avatar/13083/logo-extra-whitespace.png",
            "license_url": "https://gitlab.com/gitlab-org/gitlab/blob/master/LICENSE",
            "license": {
              "key": "mit",
              "name": "MIT License",
              "html_url": "http://choosealicense.com/licenses/mit/",
              "source_url": "https://opensource.org/licenses/MIT"
            },
            "star_count": 3812,
            "forks_count": 3561,
            "last_activity_at": "2018-01-02T11:40:26.570Z",
            "namespace": {
              "id": 72,
              "name": "GitLab.org",
              "path": "gitlab-org",
              "kind": "group",
              "full_path": "gitlab-org"
            }
          },
          "default_branch": "master",
          "visibility": "private",
          "ssh_url_to_repo": "git@example.com:diaspora/diaspora-project-site.git",
          "http_url_to_repo": "http://example.com/diaspora/diaspora-project-site.git",
          "web_url": "http://example.com/diaspora/diaspora-project-site",
          "readme_url": "http://example.com/diaspora/diaspora-project-site/blob/master/README.md",
          "tag_list": [
            "example",
            "disapora project"
          ],
          "owner": {
            "id": 3,
            "name": "Diaspora",
            "created_at": "2013-09-30T13:46:02Z"
          },
          "name": "Diaspora Project Site",
          "name_with_namespace": "Diaspora / Diaspora Project Site",
          "path": "diaspora-project-site",
          "path_with_namespace": "diaspora/diaspora-project-site",
          "issues_enabled": true,
          "open_issues_count": 1,
          "merge_requests_enabled": true,
          "jobs_enabled": true,
          "wiki_enabled": true,
          "snippets_enabled": false,
          "can_create_merge_request_in": true,
          "resolve_outdated_diff_discussions": false,
          "container_registry_enabled": false,
          "container_expiration_policy": {
            "cadence": "7d",
            "enabled": false,
            "next_run_at": "2020-01-07T21:42:58.658Z"
          },
          "created_at": "2013-09-30T13:46:02Z",
          "last_activity_at": "2013-09-30T13:46:02Z",
          "creator_id": 3,
          "namespace": {
            "id": 3,
            "name": "Diaspora",
            "path": "diaspora",
            "kind": "group",
            "full_path": "diaspora",
            "avatar_url": "http://localhost:3000/uploads/group/avatar/3/foo.jpg",
            "web_url": "http://localhost:3000/groups/diaspora"
          },
          "import_status": "none",
          "permissions": {
            "project_access": {
              "access_level": 10,
              "notification_level": 3
            },
            "group_access": {
              "access_level": 50,
              "notification_level": 3
            }
          },
          "archived": false,
          "avatar_url": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
          "license_url": "http://example.com/diaspora/diaspora-client/blob/master/LICENSE",
          "license": {
            "key": "lgpl-3.0",
            "name": "GNU Lesser General Public License v3.0",
            "nickname": "GNU LGPLv3",
            "html_url": "http://choosealicense.com/licenses/lgpl-3.0/",
            "source_url": "http://www.gnu.org/licenses/lgpl-3.0.txt"
          },
          "shared_runners_enabled": true,
          "forks_count": 0,
          "star_count": 0,
          "runners_token": "b8bc4a7a29eb76ea83cf79e4908c2b",
          "ci_default_git_depth": 50,
          "ci_forward_deployment_enabled": true,
          "public_jobs": true,
          "shared_with_groups": [
            {
              "group_id": 4,
              "group_name": "Twitter",
              "group_full_path": "twitter",
              "group_access_level": 30
            },
            {
              "group_id": 3,
              "group_name": "Gitlab Org",
              "group_full_path": "gitlab-org",
              "group_access_level": 10
            }
          ],
          "repository_storage": "default",
          "only_allow_merge_if_pipeline_succeeds": false,
          "allow_merge_on_skipped_pipeline": false,
          "only_allow_merge_if_all_discussions_are_resolved": false,
          "remove_source_branch_after_merge": false,
          "printing_merge_requests_link_enabled": true,
          "request_access_enabled": false,
          "merge_method": "merge",
          "auto_devops_enabled": true,
          "auto_devops_deploy_strategy": "continuous",
          "approvals_before_merge": 0,
          "mirror": false,
          "mirror_user_id": 45,
          "mirror_trigger_builds": false,
          "only_mirror_protected_branches": false,
          "mirror_overwrites_diverged_branches": false,
          "packages_enabled": true,
          "service_desk_enabled": false,
          "autoclose_referenced_issues": true,
          "marked_for_deletion_at": "2020-04-03T00:00:00Z",
          "marked_for_deletion_on": "2020-04-03T00:00:00Z",
          "compliance_frameworks": [
            "sox"
          ],
          "statistics": {
            "commit_count": 37,
            "storage_size": 1038090,
            "repository_size": 1038090,
            "wiki_size": 0,
            "lfs_objects_size": 0,
            "job_artifacts_size": 0,
            "packages_size": 0,
            "snippets_size": 0
          },
          "_links": {
            "self": "http://example.com/api/v4/projects",
            "issues": "http://example.com/api/v4/projects/1/issues",
            "merge_requests": "http://example.com/api/v4/projects/1/merge_requests",
            "repo_branches": "http://example.com/api/v4/projects/1/repository_branches",
            "labels": "http://example.com/api/v4/projects/1/labels",
            "events": "http://example.com/api/v4/projects/1/events",
            "members": "http://example.com/api/v4/projects/1/members"
          }
        }
      },
      "ForkedFromProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "default_branch": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "license_url": {
            "type": "string"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "forks_count": {
            "type": "integer"
          },
          "star_count": {
            "type": "integer"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          }
        }
      },
      "License": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "source_url": {
            "type": "string"
          }
        }
      },
      "ContainerExpirationPolicy": {
        "type": "object",
        "properties": {
          "cadence": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "keep_n": {
            "type": "integer"
          },
          "older_than": {
            "type": "string"
          },
          "name_regex": {
            "type": "string"
          },
          "name_regex_delete": {
            "type": "string"
          },
          "name_regex_keep": {
            "type": "string"
          },
          "next_run_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Statistics": {
        "type": "object",
        "properties": {
          "commit_count": {
            "type": "integer"
          },
          "storage_size": {
            "type": "integer"
          },
          "repository_size": {
            "type": "integer"
          },
          "wiki_size": {
            "type": "integer"
          },
          "lfs_objects_size": {
            "type": "integer"
          },
          "job_artifacts_size": {
            "type": "integer"
          },
          "packages_size": {
            "type": "integer"
          },
          "snippets_size": {
            "type": "integer"
          }
        }
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "project_access": {
            "$ref": "#/components/schemas/ProjectAccess"
          },
          "group_access": {
            "$ref": "#/components/schemas/GroupAccess"
          }
        }
      },
      "ProjectAccess": {
        "type": "object",
        "properties": {
          "access_level": {
            "type": "integer"
          },
          "notification_level": {
            "type": "integer"
          }
        }
      },
      "GroupAccess": {
        "type": "object",
        "properties": {
          "access_level": {
            "type": "integer"
          },
          "notification_level": {
            "type": "integer"
          }
        }
      },
      "Namespace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          }
        }
      },
      "Owner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Starrer": {
        "type": "object",
        "properties": {
          "starred_since": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/Author"
          }
        }
      },
      "Language": {
        "type": "object",
        "properties": {
          "Ruby": {
            "type": "number"
          },
          "JavaScript": {
            "type": "number"
          },
          "HTML": {
            "type": "number"
          },
          "CoffeeScript": {
            "type": "number"
          }
        },
        "example": {
          "Ruby": 66.69,
          "JavaScript": 22.98,
          "HTML": 7.91,
          "CoffeeScript": 2.42
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "alt": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "markdown": {
            "type": "string"
          }
        },
        "example": {
          "alt": "dk",
          "url": "/uploads/66dbcd21ec5d24ed6ea225176098d52b/dk.png",
          "full_path": "/namespace1/project1/uploads/66dbcd21ec5d24ed6ea225176098d52b/dk.png",
          "markdown": "![dk](/uploads/66dbcd21ec5d24ed6ea225176098d52b/dk.png)"
        }
      },
      "ProjectGroupLink": {
        "type": "object",
        "properties": {
          "expires_at": {
            "type": "string"
          },
          "group_access": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          }
        },
        "description": "Share the project with a group"
      },
      "ProjectHook": {
        "type": "object",
        "properties": {
          "build_events": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "enable_ssl_verification": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "issues_events": {
            "type": "string"
          },
          "merge_requests_events": {
            "type": "string"
          },
          "note_events": {
            "type": "string"
          },
          "pipeline_events": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "push_events": {
            "type": "string"
          },
          "tag_push_events": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "wiki_page_events": {
            "type": "string"
          }
        },
        "description": "Deletes project hook"
      },
      "Group": {
        "type": "object",
        "properties": {
          "auto_devops_enabled": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "default_branch_protection": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "emails_disabled": {
            "type": "string"
          },
          "file_template_project_id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "lfs_enabled": {
            "type": "boolean"
          },
          "mentions_disabled": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "project_creation_level": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "require_two_factor_authentication": {
            "type": "boolean"
          },
          "share_with_group_lock": {
            "type": "boolean"
          },
          "statistics": {
            "$ref": "#/components/schemas/GroupStatistics"
          },
          "subgroup_creation_level": {
            "type": "string"
          },
          "two_factor_grace_period": {
            "type": "integer"
          },
          "visibility": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "example": [
          {
            "id": 1,
            "name": "Foobar Group",
            "path": "foo-bar",
            "description": "An interesting group",
            "visibility": "public",
            "share_with_group_lock": false,
            "require_two_factor_authentication": false,
            "two_factor_grace_period": 48,
            "project_creation_level": "developer",
            "subgroup_creation_level": "owner",
            "lfs_enabled": true,
            "default_branch_protection": 2,
            "avatar_url": "http://localhost:3000/uploads/group/avatar/1/foo.jpg",
            "web_url": "http://localhost:3000/groups/foo-bar",
            "request_access_enabled": false,
            "full_name": "Foobar Group",
            "full_path": "foo-bar",
            "file_template_project_id": 1,
            "created_at": "2020-01-15T12:36:29.590Z",
            "statistics": {
              "storage_size": 363,
              "repository_size": 33,
              "wiki_size": 100,
              "lfs_objects_size": 123,
              "job_artifacts_size": 57,
              "packages_size": 0,
              "snippets_size": 50
            }
          }
        ]
      },
      "GroupStatistics": {
        "type": "object",
        "properties": {
          "job_artifacts_size": {
            "type": "integer"
          },
          "lfs_objects_size": {
            "type": "integer"
          },
          "packages_size": {
            "type": "integer"
          },
          "repository_size": {
            "type": "integer"
          },
          "snippets_size": {
            "type": "integer"
          },
          "storage_size": {
            "type": "integer"
          },
          "wiki_size": {
            "type": "integer"
          }
        }
      },
      "SharedWithGroups": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer"
          },
          "group_name": {
            "type": "string"
          },
          "group_full_path": {
            "type": "string"
          },
          "group_access_level": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string"
          }
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "issues": {
            "type": "string"
          },
          "merge_requests": {
            "type": "string"
          },
          "repo_branches": {
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "events": {
            "type": "string"
          },
          "members": {
            "type": "string"
          }
        }
      },
      "SharedProject": {
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "archived": {
            "type": "boolean"
          },
          "auto_cancel_pending_pipelines": {
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "type": "string"
          },
          "auto_devops_enabled": {
            "type": "boolean"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "build_coverage_regex": {
            "type": "string"
          },
          "build_timeout": {
            "type": "integer"
          },
          "builds_access_level": {
            "type": "string"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "ci_config_path": {
            "type": "string"
          },
          "ci_default_git_depth": {
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "type": "boolean"
          },
          "container_expiration_policy": {
            "$ref": "#/components/schemas/ContainerExpirationPolicy"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "creator_id": {
            "type": "integer"
          },
          "default_branch": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "emails_disabled": {
            "type": "string"
          },
          "empty_repo": {
            "type": "boolean"
          },
          "forking_access_level": {
            "type": "string"
          },
          "forks_count": {
            "type": "integer"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "import_status": {
            "type": "string"
          },
          "issues_access_level": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "last_activity_at": {
            "type": "string"
          },
          "lfs_enabled": {
            "type": "boolean"
          },
          "merge_method": {
            "type": "string"
          },
          "merge_requests_access_level": {
            "type": "string"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "pages_access_level": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "printing_merge_request_link_enabled": {
            "type": "boolean"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "readme_url": {
            "type": "string"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "repository_access_level": {
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "snippets_access_level": {
            "type": "string"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "star_count": {
            "type": "integer"
          },
          "suggestion_commit_message": {
            "type": "string"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "wiki_access_level": {
            "type": "string"
          },
          "wiki_enabled": {
            "type": "boolean"
          }
        },
        "example": [
          {
            "id": 8,
            "description": "Shared project for Html5 Boilerplate",
            "name": "Html5 Boilerplate",
            "name_with_namespace": "H5bp / Html5 Boilerplate",
            "path": "html5-boilerplate",
            "path_with_namespace": "h5bp/html5-boilerplate",
            "created_at": "2020-04-27T06:13:22Z",
            "default_branch": "master",
            "tag_list": [],
            "ssh_url_to_repo": "ssh://git@gitlab.com/h5bp/html5-boilerplate.git",
            "http_url_to_repo": "http://gitlab.com/h5bp/html5-boilerplate.git",
            "web_url": "http://gitlab.com/h5bp/html5-boilerplate",
            "readme_url": "http://gitlab.com/h5bp/html5-boilerplate/-/blob/master/README.md",
            "star_count": 0,
            "forks_count": 4,
            "last_activity_at": "2020-04-27T06:13:22Z",
            "namespace": {
              "id": 28,
              "name": "H5bp",
              "path": "h5bp",
              "kind": "group",
              "full_path": "h5bp",
              "web_url": "http://gitlab.com/groups/h5bp"
            },
            "_links": {
              "self": "http://gitlab.com/api/v4/projects/8",
              "issues": "http://gitlab.com/api/v4/projects/8/issues",
              "merge_requests": "http://gitlab.com/api/v4/projects/8/merge_requests",
              "repo_branches": "http://gitlab.com/api/v4/projects/8/repository/branches",
              "labels": "http://gitlab.com/api/v4/projects/8/labels",
              "events": "http://gitlab.com/api/v4/projects/8/events",
              "members": "http://gitlab.com/api/v4/projects/8/members"
            },
            "empty_repo": false,
            "archived": false,
            "visibility": "public",
            "resolve_outdated_diff_discussions": false,
            "container_registry_enabled": true,
            "container_expiration_policy": {
              "cadence": "7d",
              "enabled": true,
              "next_run_at": "2020-05-04T06:13:22.654Z"
            },
            "issues_enabled": true,
            "merge_requests_enabled": true,
            "wiki_enabled": true,
            "jobs_enabled": true,
            "snippets_enabled": true,
            "can_create_merge_request_in": true,
            "issues_access_level": "enabled",
            "repository_access_level": "enabled",
            "merge_requests_access_level": "enabled",
            "forking_access_level": "enabled",
            "wiki_access_level": "enabled",
            "builds_access_level": "enabled",
            "snippets_access_level": "enabled",
            "pages_access_level": "enabled",
            "shared_runners_enabled": true,
            "lfs_enabled": true,
            "creator_id": 1,
            "import_status": "failed",
            "open_issues_count": 10,
            "ci_default_git_depth": 50,
            "ci_forward_deployment_enabled": true,
            "public_jobs": true,
            "build_timeout": 3600,
            "auto_cancel_pending_pipelines": "enabled",
            "shared_with_groups": [
              {
                "group_id": 24,
                "group_name": "Commit451",
                "group_full_path": "Commit451",
                "group_access_level": 30
              }
            ],
            "only_allow_merge_if_pipeline_succeeds": false,
            "request_access_enabled": true,
            "only_allow_merge_if_all_discussions_are_resolved": false,
            "remove_source_branch_after_merge": true,
            "printing_merge_request_link_enabled": true,
            "merge_method": "merge",
            "auto_devops_enabled": true,
            "auto_devops_deploy_strategy": "continuous",
            "autoclose_referenced_issues": true,
            "repository_storage": "default"
          }
        ]
      },
      "GroupDetails": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "file_template_project_id": {
            "type": "integer"
          },
          "full_name": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "runners_token": {
            "type": "string"
          },
          "shared_projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "shared_with_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedWithGroups"
            }
          },
          "visibility": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "example": {
          "id": 4,
          "name": "Twitter",
          "path": "twitter",
          "description": "Aliquid qui quis dignissimos distinctio ut commodi voluptas est.",
          "visibility": "public",
          "web_url": "https://gitlab.example.com/groups/twitter",
          "request_access_enabled": false,
          "full_name": "Twitter",
          "full_path": "twitter",
          "runners_token": "ba324ca7b1c77fc20bb9",
          "file_template_project_id": 1,
          "created_at": "2020-01-15T12:36:29.590Z",
          "shared_with_groups": [
            {
              "group_id": 28,
              "group_name": "H5bp",
              "group_full_path": "h5bp",
              "group_access_level": 20
            }
          ],
          "projects": [
            {
              "id": 7,
              "description": "Voluptas veniam qui et beatae voluptas doloremque explicabo facilis.",
              "default_branch": "master",
              "tag_list": [],
              "archived": false,
              "visibility": "public",
              "ssh_url_to_repo": "git@gitlab.example.com:twitter/typeahead-js.git",
              "http_url_to_repo": "https://gitlab.example.com/twitter/typeahead-js.git",
              "web_url": "https://gitlab.example.com/twitter/typeahead-js",
              "name": "Typeahead.Js",
              "name_with_namespace": "Twitter / Typeahead.Js",
              "path": "typeahead-js",
              "path_with_namespace": "twitter/typeahead-js",
              "issues_enabled": true,
              "merge_requests_enabled": true,
              "wiki_enabled": true,
              "jobs_enabled": true,
              "snippets_enabled": false,
              "container_registry_enabled": true,
              "created_at": "2016-06-17T07:47:25.578Z",
              "last_activity_at": "2016-06-17T07:47:25.881Z",
              "shared_runners_enabled": true,
              "creator_id": 1,
              "namespace": {
                "id": 4,
                "name": "Twitter",
                "path": "twitter",
                "kind": "group"
              },
              "star_count": 0,
              "forks_count": 0,
              "open_issues_count": 3,
              "public_jobs": true,
              "shared_with_groups": [],
              "request_access_enabled": false
            },
            {
              "id": 6,
              "description": "Aspernatur omnis repudiandae qui voluptatibus eaque.",
              "default_branch": "master",
              "tag_list": [],
              "archived": false,
              "visibility": "internal",
              "ssh_url_to_repo": "git@gitlab.example.com:twitter/flight.git",
              "http_url_to_repo": "https://gitlab.example.com/twitter/flight.git",
              "web_url": "https://gitlab.example.com/twitter/flight",
              "name": "Flight",
              "name_with_namespace": "Twitter / Flight",
              "path": "flight",
              "path_with_namespace": "twitter/flight",
              "issues_enabled": true,
              "merge_requests_enabled": true,
              "wiki_enabled": true,
              "jobs_enabled": true,
              "snippets_enabled": false,
              "container_registry_enabled": true,
              "created_at": "2016-06-17T07:47:24.661Z",
              "last_activity_at": "2016-06-17T07:47:24.838Z",
              "shared_runners_enabled": true,
              "creator_id": 1,
              "namespace": {
                "id": 4,
                "name": "Twitter",
                "path": "twitter",
                "kind": "group"
              },
              "star_count": 0,
              "forks_count": 0,
              "open_issues_count": 8,
              "public_jobs": true,
              "shared_with_groups": [],
              "request_access_enabled": false
            }
          ],
          "shared_projects": [
            {
              "id": 8,
              "description": "Velit eveniet provident fugiat saepe eligendi autem.",
              "default_branch": "master",
              "tag_list": [],
              "archived": false,
              "visibility": "private",
              "ssh_url_to_repo": "git@gitlab.example.com:h5bp/html5-boilerplate.git",
              "http_url_to_repo": "https://gitlab.example.com/h5bp/html5-boilerplate.git",
              "web_url": "https://gitlab.example.com/h5bp/html5-boilerplate",
              "name": "Html5 Boilerplate",
              "name_with_namespace": "H5bp / Html5 Boilerplate",
              "path": "html5-boilerplate",
              "path_with_namespace": "h5bp/html5-boilerplate",
              "issues_enabled": true,
              "merge_requests_enabled": true,
              "wiki_enabled": true,
              "jobs_enabled": true,
              "snippets_enabled": false,
              "container_registry_enabled": true,
              "created_at": "2016-06-17T07:47:27.089Z",
              "last_activity_at": "2016-06-17T07:47:27.310Z",
              "shared_runners_enabled": true,
              "creator_id": 1,
              "namespace": {
                "id": 5,
                "name": "H5bp",
                "path": "h5bp",
                "kind": "group"
              },
              "star_count": 0,
              "forks_count": 0,
              "open_issues_count": 4,
              "public_jobs": true,
              "shared_with_groups": [
                {
                  "group_id": 4,
                  "group_name": "Twitter",
                  "group_full_path": "twitter",
                  "group_access_level": 30
                },
                {
                  "group_id": 3,
                  "group_name": "Gitlab Org",
                  "group_full_path": "gitlab-org",
                  "group_access_level": 10,
                  "expires_at": "2018-08-14T00:00:00Z"
                }
              ]
            }
          ]
        }
      },
      "Hook": {
        "type": "object",
        "properties": {
          "confidential_issues_events": {
            "type": "boolean"
          },
          "confidential_note_events": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "deployment_events": {
            "type": "boolean"
          },
          "enable_ssl_verification": {
            "type": "boolean"
          },
          "group_id": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "issues_events": {
            "type": "boolean"
          },
          "job_events": {
            "type": "boolean"
          },
          "merge_requests_events": {
            "type": "boolean"
          },
          "note_events": {
            "type": "boolean"
          },
          "pipeline_events": {
            "type": "boolean"
          },
          "push_events": {
            "type": "boolean"
          },
          "releases_events": {
            "type": "boolean"
          },
          "tag_push_events": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "wiki_page_events": {
            "type": "boolean"
          }
        },
        "example": {
          "id": 1,
          "url": "http://example.com/hook",
          "group_id": 3,
          "push_events": true,
          "issues_events": true,
          "confidential_issues_events": true,
          "merge_requests_events": true,
          "tag_push_events": true,
          "note_events": true,
          "confidential_note_events": true,
          "job_events": true,
          "pipeline_events": true,
          "wiki_page_events": true,
          "deployment_events": true,
          "releases_events": true,
          "enable_ssl_verification": true,
          "created_at": "2012-10-12T17:04:47Z"
        }
      },
      "NotIssue": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "string"
          },
          "milestone": {
            "type": "string"
          },
          "author_id": {
            "type": "integer"
          },
          "author_username": {
            "type": "string"
          },
          "assignee_id": {
            "type": "integer"
          },
          "assignee_username": {
            "type": "string"
          },
          "my_reaction_emoji": {
            "type": "string"
          }
        }
      },
      "NotGroupsIssue": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "string"
          },
          "milestone": {
            "type": "string"
          },
          "author_id": {
            "type": "integer"
          },
          "author_username": {
            "type": "string"
          },
          "assignee_id": {
            "type": "integer"
          },
          "assignee_username": {
            "type": "string"
          },
          "my_reaction_emoji": {
            "type": "string"
          },
          "search": {
            "type": "string",
            "enum": [
              "title",
              "description",
              "title,description"
            ]
          },
          "in": {
            "type": "string"
          }
        }
      },
      "Issue": {
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/IssueLinks"
          },
          "assignee": {
            "$ref": "#/components/schemas/Author"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "closed_at": {
            "type": "string"
          },
          "closed_by": {
            "$ref": "#/components/schemas/ClosedBy"
          },
          "confidential": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "discussion_locked": {
            "type": "boolean"
          },
          "downvotes": {
            "type": "integer"
          },
          "due_date": {
            "type": "string",
            "format": "date"
          },
          "has_tasks": {
            "type": "boolean"
          },
          "id": {
            "type": "integer"
          },
          "iid": {
            "type": "integer"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "merge_requests_count": {
            "type": "integer"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "moved_to_id": {
            "type": "string"
          },
          "project_id": {
            "type": "integer"
          },
          "references": {
            "$ref": "#/components/schemas/References"
          },
          "state": {
            "type": "string"
          },
          "subscribed": {
            "type": "boolean"
          },
          "service_desk_reply_to": {
            "type": "string"
          },
          "task_completion_status": {
            "$ref": "#/components/schemas/TaskCompletionStatus"
          },
          "task_status": {
            "type": "string"
          },
          "time_stats": {
            "$ref": "#/components/schemas/TimeStats"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "upvotes": {
            "type": "integer"
          },
          "user_notes_count": {
            "type": "integer"
          },
          "web_url": {
            "type": "string"
          }
        },
        "example": [
          {
            "project_id": 4,
            "milestone": {
              "project_id": 4,
              "state": "closed",
              "description": "Rerum est voluptatem provident consequuntur molestias similique ipsum dolor.",
              "iid": 3,
              "id": 11,
              "title": "v3.0",
              "created_at": "2016-01-04T15:31:39.788Z",
              "updated_at": "2016-01-04T15:31:39.788Z"
            },
            "author": {
              "state": "active",
              "web_url": "https://gitlab.example.com/root",
              "username": "root",
              "id": 1,
              "name": "Administrator"
            },
            "description": "Omnis vero earum sunt corporis dolor et placeat.",
            "state": "closed",
            "iid": 1,
            "assignees": [
              {
                "web_url": "https://gitlab.example.com/lennie",
                "state": "active",
                "username": "lennie",
                "id": 9,
                "name": "Dr. Luella Kovacek"
              }
            ],
            "assignee": {
              "web_url": "https://gitlab.example.com/lennie",
              "state": "active",
              "username": "lennie",
              "id": 9,
              "name": "Dr. Luella Kovacek"
            },
            "labels": [
              "foo",
              "bar"
            ],
            "upvotes": 4,
            "downvotes": 0,
            "merge_requests_count": 0,
            "id": 41,
            "title": "Ut commodi ullam eos dolores perferendis nihil sunt.",
            "updated_at": "2016-01-04T15:31:46Z",
            "created_at": "2016-01-04T15:31:46Z",
            "closed_at": "2016-01-05T15:31:46Z",
            "closed_by": {
              "state": "active",
              "web_url": "https://gitlab.example.com/root",
              "username": "root",
              "id": 1,
              "name": "Administrator"
            },
            "user_notes_count": 1,
            "due_date": "2016-07-22",
            "web_url": "http://gitlab.example.com/my-group/my-project/issues/1",
            "references": {
              "short": "#1",
              "relative": "#1",
              "full": "my-group/my-project#1"
            },
            "time_stats": {
              "time_estimate": 0,
              "total_time_spent": 0
            },
            "has_tasks": true,
            "task_status": "10 of 15 tasks completed",
            "confidential": false,
            "discussion_locked": false,
            "_links": {
              "self": "http://gitlab.example.com/api/v4/projects/4/issues/41",
              "notes": "http://gitlab.example.com/api/v4/projects/4/issues/41/notes",
              "award_emoji": "http://gitlab.example.com/api/v4/projects/4/issues/41/award_emoji",
              "project": "http://gitlab.example.com/api/v4/projects/4"
            },
            "task_completion_status": {
              "count": 0,
              "completed_count": 0
            }
          }
        ]
      },
      "Milestone": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "iid": {
            "type": "integer"
          },
          "project_id": {
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "References": {
        "type": "object",
        "properties": {
          "full": {
            "type": "string"
          },
          "relative": {
            "type": "string"
          },
          "short": {
            "type": "string"
          }
        }
      },
      "IssueLinks": {
        "type": "object",
        "properties": {
          "award_emoji": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "self": {
            "type": "string"
          }
        }
      },
      "TaskCompletionStatus": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "completed_count": {
            "type": "integer"
          }
        }
      },
      "ClosedBy": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        }
      },
      "Todo": {
        "type": "object",
        "properties": {
          "action_name": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectInfo"
          },
          "state": {
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/Issue"
          },
          "target_type": {
            "type": "string"
          },
          "target_url": {
            "type": "string"
          }
        },
        "example": {
          "id": 112,
          "project": {
            "id": 5,
            "name": "GitLab CI/CD",
            "name_with_namespace": "GitLab Org / GitLab CI/CD",
            "path": "gitlab-ci",
            "path_with_namespace": "gitlab-org/gitlab-ci"
          },
          "author": {
            "name": "Administrator",
            "username": "root",
            "id": 1,
            "state": "active",
            "avatar_url": "http://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon",
            "web_url": "https://gitlab.example.com/root"
          },
          "action_name": "marked",
          "target_type": "Issue",
          "target": {
            "id": 93,
            "iid": 10,
            "project_id": 5,
            "title": "Vel voluptas atque dicta mollitia adipisci qui at.",
            "description": "Tempora laboriosam sint magni sed voluptas similique.",
            "state": "closed",
            "created_at": "2016-06-17T07:47:39.486Z",
            "updated_at": "2016-07-01T11:09:13.998Z",
            "labels": [],
            "milestone": {
              "id": 26,
              "iid": 1,
              "project_id": 5,
              "title": "v0.0",
              "description": "Accusantium nostrum rerum quae quia quis nesciunt suscipit id.",
              "state": "closed",
              "created_at": "2016-06-17T07:47:33.832Z",
              "updated_at": "2016-06-17T07:47:33.832Z"
            },
            "assignees": [
              {
                "name": "Jarret O'Keefe",
                "username": "francisca",
                "id": 14,
                "state": "active",
                "avatar_url": "http://www.gravatar.com/avatar/a7fa515d53450023c83d62986d0658a8?s=80&d=identicon",
                "web_url": "https://gitlab.example.com/francisca"
              }
            ],
            "assignee": {
              "name": "Jarret O'Keefe",
              "username": "francisca",
              "id": 14,
              "state": "active",
              "avatar_url": "http://www.gravatar.com/avatar/a7fa515d53450023c83d62986d0658a8?s=80&d=identicon",
              "web_url": "https://gitlab.example.com/francisca"
            },
            "author": {
              "name": "Maxie Medhurst",
              "username": "craig_rutherford",
              "id": 12,
              "state": "active",
              "avatar_url": "http://www.gravatar.com/avatar/a0d477b3ea21970ce6ffcbb817b0b435?s=80&d=identicon",
              "web_url": "https://gitlab.example.com/craig_rutherford"
            },
            "subscribed": true,
            "user_notes_count": 7,
            "upvotes": 0,
            "downvotes": 0,
            "merge_requests_count": 0,
            "web_url": "http://gitlab.example.com/my-group/my-project/issues/10",
            "references": {
              "short": "#10",
              "relative": "#10",
              "full": "my-group/my-project#10"
            },
            "confidential": false,
            "discussion_locked": false,
            "task_completion_status": {
              "count": 0,
              "completed_count": 0
            }
          },
          "target_url": "https://gitlab.example.com/gitlab-org/gitlab-ci/issues/10",
          "body": "Vel voluptas atque dicta mollitia adipisci qui at.",
          "state": "pending",
          "created_at": "2016-07-01T11:09:13.992Z"
        }
      },
      "ProjectInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          }
        }
      },
      "TimeEstimate": {
        "type": "object",
        "properties": {
          "human_time_estimate": {
            "type": "string"
          },
          "human_total_time_spent": {
            "type": "string"
          },
          "time_estimate": {
            "type": "integer"
          },
          "total_time_spent": {
            "type": "integer"
          }
        },
        "example": {
          "human_time_estimate": "3h30m",
          "human_total_time_spent": "1h",
          "time_estimate": 12600,
          "total_time_spent": 0
        }
      },
      "MergeRequest": {
        "type": "object",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/Author"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "changes_count": {
            "type": "string"
          },
          "closed_at": {
            "type": "string"
          },
          "closed_by": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "diff_refs": {
            "$ref": "#/components/schemas/DiffRefs"
          },
          "discussion_locked": {
            "type": "string"
          },
          "downvotes": {
            "type": "integer"
          },
          "first_deployed_to_production_at": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "boolean"
          },
          "head_pipeline": {
            "$ref": "#/components/schemas/HeadPipeline"
          },
          "id": {
            "type": "integer"
          },
          "iid": {
            "type": "integer"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "latest_build_finished_at": {
            "type": "string"
          },
          "latest_build_started_at": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "merge_error": {
            "type": "string"
          },
          "merge_status": {
            "type": "string"
          },
          "merge_when_pipeline_succeeds": {
            "type": "boolean"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "pipeline": {
            "$ref": "#/components/schemas/Pipeline"
          },
          "project_id": {
            "type": "integer"
          },
          "reference": {
            "type": "string"
          },
          "references": {
            "$ref": "#/components/schemas/References"
          },
          "sha": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "string"
          },
          "source_branch": {
            "type": "string"
          },
          "source_project_id": {
            "type": "integer"
          },
          "squash": {
            "type": "boolean"
          },
          "squash_commit_sha": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "target_project_id": {
            "type": "integer"
          },
          "task_completion_status": {
            "$ref": "#/components/schemas/TaskCompletionStatus"
          },
          "time_stats": {
            "$ref": "#/components/schemas/TimeStats"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "upvotes": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/ReqUser"
          },
          "user_notes_count": {
            "type": "integer"
          },
          "web_url": {
            "type": "string"
          },
          "work_in_progress": {
            "type": "boolean"
          }
        },
        "example": [
          {
            "id": 29,
            "iid": 11,
            "project_id": 1,
            "title": "Provident eius eos blanditiis consequatur neque odit.",
            "description": "Ut consequatur ipsa aspernatur quisquam voluptatum fugit. Qui harum corporis quo fuga ut incidunt veritatis. Autem necessitatibus et harum occaecati nihil ea.\r\n\r\ntwitter/flight#8",
            "state": "opened",
            "created_at": "2018-09-18T14:36:15.510Z",
            "updated_at": "2018-09-19T07:45:13.089Z",
            "target_branch": "v2.x",
            "source_branch": "so_long_jquery",
            "user_notes_count": 9,
            "upvotes": 0,
            "downvotes": 0,
            "author": {
              "id": 14,
              "name": "Verna Hills",
              "username": "lawanda_reinger",
              "state": "active",
              "avatar_url": "https://www.gravatar.com/avatar/de68a91aeab1cff563795fb98a0c2cc0?s=80&d=identicon",
              "web_url": "https://gitlab.example.com/lawanda_reinger"
            },
            "assignee": {
              "id": 19,
              "name": "Jody Baumbach",
              "username": "felipa.kuvalis",
              "state": "active",
              "avatar_url": "https://www.gravatar.com/avatar/6541fc75fc4e87e203529bd275fafd07?s=80&d=identicon",
              "web_url": "https://gitlab.example.com/felipa.kuvalis"
            },
            "source_project_id": 1,
            "target_project_id": 1,
            "labels": [],
            "work_in_progress": false,
            "milestone": {
              "id": 27,
              "iid": 2,
              "project_id": 1,
              "title": "v1.0",
              "description": "Et tenetur voluptatem minima doloribus vero dignissimos vitae.",
              "state": "active",
              "created_at": "2018-09-18T14:35:44.353Z",
              "updated_at": "2018-09-18T14:35:44.353Z",
              "web_url": "https://gitlab.example.com/twitter/flight/milestones/2"
            },
            "merge_when_pipeline_succeeds": false,
            "merge_status": "cannot_be_merged",
            "sha": "3b7b528e9353295c1c125dad281ac5b5deae5f12",
            "force_remove_source_branch": false,
            "reference": "!11",
            "web_url": "https://gitlab.example.com/twitter/flight/merge_requests/4",
            "references": {
              "short": "!4",
              "relative": "!4",
              "full": "twitter/flight!4"
            },
            "time_stats": {
              "time_estimate": 0,
              "total_time_spent": 0
            },
            "squash": false,
            "task_completion_status": {
              "count": 0,
              "completed_count": 0
            },
            "changes_count": "10",
            "latest_build_started_at": "2018-12-05T01:16:41.723Z",
            "latest_build_finished_at": "2018-12-05T02:35:54.046Z",
            "pipeline": {
              "id": 38980952,
              "sha": "81c6a84c7aebd45a1ac2c654aa87f11e32338e0a",
              "ref": "test-branch",
              "status": "success",
              "web_url": "https://gitlab.com/gitlab-org/gitlab/pipelines/38980952"
            },
            "head_pipeline": {
              "id": 38980952,
              "sha": "81c6a84c7aebd45a1ac2c654aa87f11e32338e0a",
              "ref": "test-branch",
              "status": "success",
              "web_url": "https://gitlab.example.com/twitter/flight/pipelines/38980952",
              "before_sha": "3c738a37eb23cf4c0ed0d45d6ddde8aad4a8da51",
              "tag": false,
              "user": {
                "id": 19,
                "name": "Jody Baumbach",
                "username": "felipa.kuvalis",
                "state": "active",
                "avatar_url": "https://www.gravatar.com/avatar/6541fc75fc4e87e203529bd275fafd07?s=80&d=identicon",
                "web_url": "https://gitlab.example.com/felipa.kuvalis"
              },
              "created_at": "2018-12-05T01:16:13.342Z",
              "updated_at": "2018-12-05T02:35:54.086Z",
              "started_at": "2018-12-05T01:16:41.723Z",
              "finished_at": "2018-12-05T02:35:54.046Z",
              "duration": 4436,
              "coverage": "46.68",
              "detailed_status": {
                "icon": "status_warning",
                "text": "passed",
                "label": "passed with warnings",
                "group": "success-with-warnings",
                "tooltip": "passed",
                "has_details": true,
                "details_path": "/twitter/flight/pipelines/38",
                "favicon": "https://gitlab.example.com/assets/ci_favicons/favicon_status_success-8451333011eee8ce9f2ab25dc487fe24a8758c694827a582f17f42b0a90446a2.png"
              }
            },
            "diff_refs": {
              "base_sha": "d052d768f0126e8cddf80afd8b1eb07f406a3fcb",
              "head_sha": "81c6a84c7aebd45a1ac2c654aa87f11e32338e0a",
              "start_sha": "d052d768f0126e8cddf80afd8b1eb07f406a3fcb"
            },
            "user": {
              "can_merge": true
            }
          }
        ]
      },
      "Pipeline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "example": {
          "id": 38980952,
          "sha": "81c6a84c7aebd45a1ac2c654aa87f11e32338e0a",
          "ref": "test-branch",
          "status": "success",
          "web_url": "https://gitlab.com/gitlab-org/gitlab/pipelines/38980952"
        }
      },
      "HeadPipeline": {
        "type": "object",
        "properties": {
          "before_sha": {
            "type": "string"
          },
          "committed_at": {
            "type": "string"
          },
          "coverage": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "detailed_status": {
            "$ref": "#/components/schemas/DetailedStatus"
          },
          "duration": {
            "type": "integer"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tag": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/Author"
          },
          "web_url": {
            "type": "string"
          },
          "yaml_errors": {
            "type": "string"
          }
        }
      },
      "DetailedStatus": {
        "type": "object",
        "properties": {
          "details_path": {
            "type": "string"
          },
          "favicon": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "has_details": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          },
          "illustration": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "tooltip": {
            "type": "string"
          }
        }
      },
      "DiffRefs": {
        "type": "object",
        "properties": {
          "base_sha": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "start_sha": {
            "type": "string"
          }
        }
      },
      "ReqUser": {
        "type": "object",
        "properties": {
          "can_merge": {
            "type": "boolean"
          }
        }
      },
      "MetricImage": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          }
        },
        "example": {
          "id": 23,
          "created_at": "2020-11-13T00:06:18.084Z",
          "filename": "file.png",
          "file_path": "/uploads/-/system/issuable_metric_image/file/23/file.png",
          "url": "http://example.com"
        }
      },
      "FileTree": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "example": [
          {
            "id": "a1e8f8d745cc87e3a9248358d9352bb7f9a0aeba",
            "name": "html",
            "type": "tree",
            "path": "files/html",
            "mode": "040000"
          },
          {
            "id": "4535904260b1082e14f867f7a24fd8c21495bde3",
            "name": "images",
            "type": "tree",
            "path": "files/images",
            "mode": "040000"
          },
          {
            "id": "31405c5ddef582c5a9b7a85230413ff90e2fe720",
            "name": "js",
            "type": "tree",
            "path": "files/js",
            "mode": "040000"
          },
          {
            "id": "cc71111cfad871212dc99572599a568bfe1e7e00",
            "name": "lfs",
            "type": "tree",
            "path": "files/lfs",
            "mode": "040000"
          },
          {
            "id": "fd581c619bf59cfdfa9c8282377bb09c2f897520",
            "name": "markdown",
            "type": "tree",
            "path": "files/markdown",
            "mode": "040000"
          },
          {
            "id": "23ea4d11a4bdd960ee5320c5cb65b5b3fdbc60db",
            "name": "ruby",
            "type": "tree",
            "path": "files/ruby",
            "mode": "040000"
          },
          {
            "id": "7d70e02340bac451f281cecf0a980907974bd8be",
            "name": "whitespace",
            "type": "blob",
            "path": "files/whitespace",
            "mode": "100644"
          }
        ]
      }
    }
  }
}